
session_27_8_updated.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003516  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00003516  0000358a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003840  00000000  00000000  000036b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000213b  00000000  00000000  00006ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000902b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  000091cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  000093bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000b7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000cb4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000dd24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000dee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000e1da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000eb48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0f 07 	call	0xe1e	; 0xe1e <main>
      7a:	0c 94 89 1a 	jmp	0x3512	; 0x3512 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e6       	ldi	r26, 0x6E	; 110
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e6       	ldi	r24, 0x6E	; 110
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6e e6       	ldi	r22, 0x6E	; 110
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	ea 58       	subi	r30, 0x8A	; 138
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <main>:
// #include "LM35.h"
// #include "Uart.h"


int main()
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	60 97       	sbiw	r28, 0x10	; 16
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
	{

	}
*/

	Lcd_vidinit();
     e32:	0e 94 b6 0a 	call	0x156c	; 0x156c <Lcd_vidinit>
	Lcd_vidCmd(_LCD_CURSOR_OFF);
     e36:	8c e0       	ldi	r24, 0x0C	; 12
     e38:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <Lcd_vidCmd>
	LM35_vidInit();
     e3c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <LM35_vidInit>
	u16 temp = 0;
     e40:	18 8a       	std	Y+16, r1	; 0x10
     e42:	1f 86       	std	Y+15, r1	; 0x0f
	*/

	while (1)
	{
		//LM35 -> 10mv/1oc
		temp = LM35_u16TempRead();
     e44:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LM35_u16TempRead>
     e48:	98 8b       	std	Y+16, r25	; 0x10
     e4a:	8f 87       	std	Y+15, r24	; 0x0f

		LCD_vidRowColumn(0,0);
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_vidRowColumn>
		Lcd_vidDisplayStr("Temp =    ");   //To clear the LCD after every display
     e54:	80 e6       	ldi	r24, 0x60	; 96
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Lcd_vidDisplayStr>
		LCD_vidRowColumn(0,6);
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	66 e0       	ldi	r22, 0x06	; 6
     e60:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_vidRowColumn>
		LCD_vidDisplayInt(temp);
     e64:	8f 85       	ldd	r24, Y+15	; 0x0f
     e66:	98 89       	ldd	r25, Y+16	; 0x10
     e68:	cc 01       	movw	r24, r24
     e6a:	a0 e0       	ldi	r26, 0x00	; 0
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <LCD_vidDisplayInt>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a8 ec       	ldi	r26, 0xC8	; 200
     e7c:	b2 e4       	ldi	r27, 0x42	; 66
     e7e:	8b 87       	std	Y+11, r24	; 0x0b
     e80:	9c 87       	std	Y+12, r25	; 0x0c
     e82:	ad 87       	std	Y+13, r26	; 0x0d
     e84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e86:	6b 85       	ldd	r22, Y+11	; 0x0b
     e88:	7c 85       	ldd	r23, Y+12	; 0x0c
     e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	4a e7       	ldi	r20, 0x7A	; 122
     e94:	55 e4       	ldi	r21, 0x45	; 69
     e96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	8f 83       	std	Y+7, r24	; 0x07
     ea0:	98 87       	std	Y+8, r25	; 0x08
     ea2:	a9 87       	std	Y+9, r26	; 0x09
     ea4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ea6:	6f 81       	ldd	r22, Y+7	; 0x07
     ea8:	78 85       	ldd	r23, Y+8	; 0x08
     eaa:	89 85       	ldd	r24, Y+9	; 0x09
     eac:	9a 85       	ldd	r25, Y+10	; 0x0a
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e8       	ldi	r20, 0x80	; 128
     eb4:	5f e3       	ldi	r21, 0x3F	; 63
     eb6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     eba:	88 23       	and	r24, r24
     ebc:	2c f4       	brge	.+10     	; 0xec8 <main+0xaa>
		__ticks = 1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	9e 83       	std	Y+6, r25	; 0x06
     ec4:	8d 83       	std	Y+5, r24	; 0x05
     ec6:	3f c0       	rjmp	.+126    	; 0xf46 <main+0x128>
	else if (__tmp > 65535)
     ec8:	6f 81       	ldd	r22, Y+7	; 0x07
     eca:	78 85       	ldd	r23, Y+8	; 0x08
     ecc:	89 85       	ldd	r24, Y+9	; 0x09
     ece:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	3f ef       	ldi	r19, 0xFF	; 255
     ed4:	4f e7       	ldi	r20, 0x7F	; 127
     ed6:	57 e4       	ldi	r21, 0x47	; 71
     ed8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     edc:	18 16       	cp	r1, r24
     ede:	4c f5       	brge	.+82     	; 0xf32 <main+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e2       	ldi	r20, 0x20	; 32
     eee:	51 e4       	ldi	r21, 0x41	; 65
     ef0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	bc 01       	movw	r22, r24
     efa:	cd 01       	movw	r24, r26
     efc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	9e 83       	std	Y+6, r25	; 0x06
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	0f c0       	rjmp	.+30     	; 0xf28 <main+0x10a>
     f0a:	80 e9       	ldi	r24, 0x90	; 144
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	9c 83       	std	Y+4, r25	; 0x04
     f10:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	f1 f7       	brne	.-4      	; 0xf16 <main+0xf8>
     f1a:	9c 83       	std	Y+4, r25	; 0x04
     f1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1e:	8d 81       	ldd	r24, Y+5	; 0x05
     f20:	9e 81       	ldd	r25, Y+6	; 0x06
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	9e 83       	std	Y+6, r25	; 0x06
     f26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	69 f7       	brne	.-38     	; 0xf0a <main+0xec>
     f30:	89 cf       	rjmp	.-238    	; 0xe44 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f32:	6f 81       	ldd	r22, Y+7	; 0x07
     f34:	78 85       	ldd	r23, Y+8	; 0x08
     f36:	89 85       	ldd	r24, Y+9	; 0x09
     f38:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	9e 83       	std	Y+6, r25	; 0x06
     f44:	8d 83       	std	Y+5, r24	; 0x05
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	9e 81       	ldd	r25, Y+6	; 0x06
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	9a 81       	ldd	r25, Y+2	; 0x02
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <main+0x134>
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	74 cf       	rjmp	.-280    	; 0xe44 <main+0x26>

00000f5c <SSD_vidInit>:
#include <util/delay.h>
#include "Std_Types.h"


void SSD_vidInit(void)
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB , DIO_PIN1 , DIO_OUTPUT);
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB , DIO_PIN2 , DIO_OUTPUT);
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	62 e0       	ldi	r22, 0x02	; 2
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>

	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN4 , DIO_OUTPUT);
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	64 e0       	ldi	r22, 0x04	; 4
     f7c:	41 e0       	ldi	r20, 0x01	; 1
     f7e:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN5 , DIO_OUTPUT);
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	65 e0       	ldi	r22, 0x05	; 5
     f86:	41 e0       	ldi	r20, 0x01	; 1
     f88:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN6 , DIO_OUTPUT);
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	66 e0       	ldi	r22, 0x06	; 6
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN7 , DIO_OUTPUT);
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	67 e0       	ldi	r22, 0x07	; 7
     f9a:	41 e0       	ldi	r20, 0x01	; 1
     f9c:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <SSD_viddisplyNum>:
void SSD_viddisplyNum(u8 num)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	e3 97       	sbiw	r28, 0x33	; 51
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	8b ab       	std	Y+51, r24	; 0x33
	//Dio_vidWriteChanelGroup(DIO_PORTA , 5);

	//num = 25
	u8 loc_secondDigit = (num%10) <<4; //to shift 4 bits to the left
     fbc:	8b a9       	ldd	r24, Y+51	; 0x33
     fbe:	9a e0       	ldi	r25, 0x0A	; 10
     fc0:	69 2f       	mov	r22, r25
     fc2:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__udivmodqi4>
     fc6:	89 2f       	mov	r24, r25
     fc8:	82 95       	swap	r24
     fca:	80 7f       	andi	r24, 0xF0	; 240
     fcc:	8a ab       	std	Y+50, r24	; 0x32
	u8 loc_firstDigit = (num/10) <<4;
     fce:	8b a9       	ldd	r24, Y+51	; 0x33
     fd0:	9a e0       	ldi	r25, 0x0A	; 10
     fd2:	69 2f       	mov	r22, r25
     fd4:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__udivmodqi4>
     fd8:	82 95       	swap	r24
     fda:	80 7f       	andi	r24, 0xF0	; 240
     fdc:	89 ab       	std	Y+49, r24	; 0x31

	// ENable SSD 1 -> EN1 = HIGH
	Dio_vidwriteChanel(DIO_PORTB , DIO_PIN2 , DIO_HIGH);
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	62 e0       	ldi	r22, 0x02	; 2
     fe2:	41 e0       	ldi	r20, 0x01	; 1
     fe4:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
	// Disable SSD 2 -> EN2 = LOW
	Dio_vidwriteChanel(DIO_PORTB , DIO_PIN1 , DIO_LOW);
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	61 e0       	ldi	r22, 0x01	; 1
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
	// Write first digit
	Dio_vidWriteChanelGroup( DIO_PORTA , loc_firstDigit , SSD_MASK);
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	69 a9       	ldd	r22, Y+49	; 0x31
     ff6:	4f e0       	ldi	r20, 0x0F	; 15
     ff8:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Dio_vidWriteChanelGroup>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	aa ef       	ldi	r26, 0xFA	; 250
    1002:	b3 e4       	ldi	r27, 0x43	; 67
    1004:	8d a7       	std	Y+45, r24	; 0x2d
    1006:	9e a7       	std	Y+46, r25	; 0x2e
    1008:	af a7       	std	Y+47, r26	; 0x2f
    100a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    100c:	6d a5       	ldd	r22, Y+45	; 0x2d
    100e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1010:	8f a5       	ldd	r24, Y+47	; 0x2f
    1012:	98 a9       	ldd	r25, Y+48	; 0x30
    1014:	2b ea       	ldi	r18, 0xAB	; 171
    1016:	3a ea       	ldi	r19, 0xAA	; 170
    1018:	4a ea       	ldi	r20, 0xAA	; 170
    101a:	50 e4       	ldi	r21, 0x40	; 64
    101c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	89 a7       	std	Y+41, r24	; 0x29
    1026:	9a a7       	std	Y+42, r25	; 0x2a
    1028:	ab a7       	std	Y+43, r26	; 0x2b
    102a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    102c:	69 a5       	ldd	r22, Y+41	; 0x29
    102e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1030:	8b a5       	ldd	r24, Y+43	; 0x2b
    1032:	9c a5       	ldd	r25, Y+44	; 0x2c
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e8       	ldi	r20, 0x80	; 128
    103a:	5f e3       	ldi	r21, 0x3F	; 63
    103c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1040:	88 23       	and	r24, r24
    1042:	1c f4       	brge	.+6      	; 0x104a <SSD_viddisplyNum+0xa4>
		__ticks = 1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	88 a7       	std	Y+40, r24	; 0x28
    1048:	91 c0       	rjmp	.+290    	; 0x116c <SSD_viddisplyNum+0x1c6>
	else if (__tmp > 255)
    104a:	69 a5       	ldd	r22, Y+41	; 0x29
    104c:	7a a5       	ldd	r23, Y+42	; 0x2a
    104e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1050:	9c a5       	ldd	r25, Y+44	; 0x2c
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	4f e7       	ldi	r20, 0x7F	; 127
    1058:	53 e4       	ldi	r21, 0x43	; 67
    105a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    105e:	18 16       	cp	r1, r24
    1060:	0c f0       	brlt	.+2      	; 0x1064 <SSD_viddisplyNum+0xbe>
    1062:	7b c0       	rjmp	.+246    	; 0x115a <SSD_viddisplyNum+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    1064:	6d a5       	ldd	r22, Y+45	; 0x2d
    1066:	7e a5       	ldd	r23, Y+46	; 0x2e
    1068:	8f a5       	ldd	r24, Y+47	; 0x2f
    106a:	98 a9       	ldd	r25, Y+48	; 0x30
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	4a e7       	ldi	r20, 0x7A	; 122
    1072:	54 e4       	ldi	r21, 0x44	; 68
    1074:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	8c a3       	std	Y+36, r24	; 0x24
    107e:	9d a3       	std	Y+37, r25	; 0x25
    1080:	ae a3       	std	Y+38, r26	; 0x26
    1082:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1084:	6c a1       	ldd	r22, Y+36	; 0x24
    1086:	7d a1       	ldd	r23, Y+37	; 0x25
    1088:	8e a1       	ldd	r24, Y+38	; 0x26
    108a:	9f a1       	ldd	r25, Y+39	; 0x27
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	4a e7       	ldi	r20, 0x7A	; 122
    1092:	55 e4       	ldi	r21, 0x45	; 69
    1094:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	88 a3       	std	Y+32, r24	; 0x20
    109e:	99 a3       	std	Y+33, r25	; 0x21
    10a0:	aa a3       	std	Y+34, r26	; 0x22
    10a2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    10a4:	68 a1       	ldd	r22, Y+32	; 0x20
    10a6:	79 a1       	ldd	r23, Y+33	; 0x21
    10a8:	8a a1       	ldd	r24, Y+34	; 0x22
    10aa:	9b a1       	ldd	r25, Y+35	; 0x23
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e8       	ldi	r20, 0x80	; 128
    10b2:	5f e3       	ldi	r21, 0x3F	; 63
    10b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10b8:	88 23       	and	r24, r24
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <SSD_viddisplyNum+0x120>
		__ticks = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	9f 8f       	std	Y+31, r25	; 0x1f
    10c2:	8e 8f       	std	Y+30, r24	; 0x1e
    10c4:	3f c0       	rjmp	.+126    	; 0x1144 <SSD_viddisplyNum+0x19e>
	else if (__tmp > 65535)
    10c6:	68 a1       	ldd	r22, Y+32	; 0x20
    10c8:	79 a1       	ldd	r23, Y+33	; 0x21
    10ca:	8a a1       	ldd	r24, Y+34	; 0x22
    10cc:	9b a1       	ldd	r25, Y+35	; 0x23
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10da:	18 16       	cp	r1, r24
    10dc:	4c f5       	brge	.+82     	; 0x1130 <SSD_viddisplyNum+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10de:	6c a1       	ldd	r22, Y+36	; 0x24
    10e0:	7d a1       	ldd	r23, Y+37	; 0x25
    10e2:	8e a1       	ldd	r24, Y+38	; 0x26
    10e4:	9f a1       	ldd	r25, Y+39	; 0x27
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e2       	ldi	r20, 0x20	; 32
    10ec:	51 e4       	ldi	r21, 0x41	; 65
    10ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	9f 8f       	std	Y+31, r25	; 0x1f
    1104:	8e 8f       	std	Y+30, r24	; 0x1e
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <SSD_viddisplyNum+0x180>
    1108:	80 e9       	ldi	r24, 0x90	; 144
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	9d 8f       	std	Y+29, r25	; 0x1d
    110e:	8c 8f       	std	Y+28, r24	; 0x1c
    1110:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1112:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <SSD_viddisplyNum+0x16e>
    1118:	9d 8f       	std	Y+29, r25	; 0x1d
    111a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    111e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	9f 8f       	std	Y+31, r25	; 0x1f
    1124:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1126:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1128:	9f 8d       	ldd	r25, Y+31	; 0x1f
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	69 f7       	brne	.-38     	; 0x1108 <SSD_viddisplyNum+0x162>
    112e:	24 c0       	rjmp	.+72     	; 0x1178 <SSD_viddisplyNum+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1130:	68 a1       	ldd	r22, Y+32	; 0x20
    1132:	79 a1       	ldd	r23, Y+33	; 0x21
    1134:	8a a1       	ldd	r24, Y+34	; 0x22
    1136:	9b a1       	ldd	r25, Y+35	; 0x23
    1138:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	9f 8f       	std	Y+31, r25	; 0x1f
    1142:	8e 8f       	std	Y+30, r24	; 0x1e
    1144:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1146:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1148:	9b 8f       	std	Y+27, r25	; 0x1b
    114a:	8a 8f       	std	Y+26, r24	; 0x1a
    114c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    114e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <SSD_viddisplyNum+0x1aa>
    1154:	9b 8f       	std	Y+27, r25	; 0x1b
    1156:	8a 8f       	std	Y+26, r24	; 0x1a
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <SSD_viddisplyNum+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    115a:	69 a5       	ldd	r22, Y+41	; 0x29
    115c:	7a a5       	ldd	r23, Y+42	; 0x2a
    115e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1160:	9c a5       	ldd	r25, Y+44	; 0x2c
    1162:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	88 a7       	std	Y+40, r24	; 0x28
    116c:	88 a5       	ldd	r24, Y+40	; 0x28
    116e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1170:	89 8d       	ldd	r24, Y+25	; 0x19
    1172:	8a 95       	dec	r24
    1174:	f1 f7       	brne	.-4      	; 0x1172 <SSD_viddisplyNum+0x1cc>
    1176:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(500);

	// ENable SSD 1 -> EN1 = LOW
	Dio_vidwriteChanel(DIO_PORTB , DIO_PIN2 , DIO_LOW);
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	62 e0       	ldi	r22, 0x02	; 2
    117c:	40 e0       	ldi	r20, 0x00	; 0
    117e:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
	// Disable SSD 2 -> EN2 = HIGH
	Dio_vidwriteChanel(DIO_PORTB , DIO_PIN1 , DIO_HIGH);
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
	// Write second digit
	Dio_vidWriteChanelGroup( DIO_PORTA , loc_secondDigit , SSD_MASK);
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	6a a9       	ldd	r22, Y+50	; 0x32
    1190:	4f e0       	ldi	r20, 0x0F	; 15
    1192:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Dio_vidWriteChanelGroup>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	aa ef       	ldi	r26, 0xFA	; 250
    119c:	b3 e4       	ldi	r27, 0x43	; 67
    119e:	8d 8b       	std	Y+21, r24	; 0x15
    11a0:	9e 8b       	std	Y+22, r25	; 0x16
    11a2:	af 8b       	std	Y+23, r26	; 0x17
    11a4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    11a6:	6d 89       	ldd	r22, Y+21	; 0x15
    11a8:	7e 89       	ldd	r23, Y+22	; 0x16
    11aa:	8f 89       	ldd	r24, Y+23	; 0x17
    11ac:	98 8d       	ldd	r25, Y+24	; 0x18
    11ae:	2b ea       	ldi	r18, 0xAB	; 171
    11b0:	3a ea       	ldi	r19, 0xAA	; 170
    11b2:	4a ea       	ldi	r20, 0xAA	; 170
    11b4:	50 e4       	ldi	r21, 0x40	; 64
    11b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	89 8b       	std	Y+17, r24	; 0x11
    11c0:	9a 8b       	std	Y+18, r25	; 0x12
    11c2:	ab 8b       	std	Y+19, r26	; 0x13
    11c4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    11c6:	69 89       	ldd	r22, Y+17	; 0x11
    11c8:	7a 89       	ldd	r23, Y+18	; 0x12
    11ca:	8b 89       	ldd	r24, Y+19	; 0x13
    11cc:	9c 89       	ldd	r25, Y+20	; 0x14
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e8       	ldi	r20, 0x80	; 128
    11d4:	5f e3       	ldi	r21, 0x3F	; 63
    11d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11da:	88 23       	and	r24, r24
    11dc:	1c f4       	brge	.+6      	; 0x11e4 <SSD_viddisplyNum+0x23e>
		__ticks = 1;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	88 8b       	std	Y+16, r24	; 0x10
    11e2:	91 c0       	rjmp	.+290    	; 0x1306 <SSD_viddisplyNum+0x360>
	else if (__tmp > 255)
    11e4:	69 89       	ldd	r22, Y+17	; 0x11
    11e6:	7a 89       	ldd	r23, Y+18	; 0x12
    11e8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ea:	9c 89       	ldd	r25, Y+20	; 0x14
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	4f e7       	ldi	r20, 0x7F	; 127
    11f2:	53 e4       	ldi	r21, 0x43	; 67
    11f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11f8:	18 16       	cp	r1, r24
    11fa:	0c f0       	brlt	.+2      	; 0x11fe <SSD_viddisplyNum+0x258>
    11fc:	7b c0       	rjmp	.+246    	; 0x12f4 <SSD_viddisplyNum+0x34e>
	{
		_delay_ms(__us / 1000.0);
    11fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1200:	7e 89       	ldd	r23, Y+22	; 0x16
    1202:	8f 89       	ldd	r24, Y+23	; 0x17
    1204:	98 8d       	ldd	r25, Y+24	; 0x18
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	4a e7       	ldi	r20, 0x7A	; 122
    120c:	54 e4       	ldi	r21, 0x44	; 68
    120e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	8c 87       	std	Y+12, r24	; 0x0c
    1218:	9d 87       	std	Y+13, r25	; 0x0d
    121a:	ae 87       	std	Y+14, r26	; 0x0e
    121c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1220:	7d 85       	ldd	r23, Y+13	; 0x0d
    1222:	8e 85       	ldd	r24, Y+14	; 0x0e
    1224:	9f 85       	ldd	r25, Y+15	; 0x0f
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	4a e7       	ldi	r20, 0x7A	; 122
    122c:	55 e4       	ldi	r21, 0x45	; 69
    122e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	88 87       	std	Y+8, r24	; 0x08
    1238:	99 87       	std	Y+9, r25	; 0x09
    123a:	aa 87       	std	Y+10, r26	; 0x0a
    123c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    123e:	68 85       	ldd	r22, Y+8	; 0x08
    1240:	79 85       	ldd	r23, Y+9	; 0x09
    1242:	8a 85       	ldd	r24, Y+10	; 0x0a
    1244:	9b 85       	ldd	r25, Y+11	; 0x0b
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e8       	ldi	r20, 0x80	; 128
    124c:	5f e3       	ldi	r21, 0x3F	; 63
    124e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1252:	88 23       	and	r24, r24
    1254:	2c f4       	brge	.+10     	; 0x1260 <SSD_viddisplyNum+0x2ba>
		__ticks = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9f 83       	std	Y+7, r25	; 0x07
    125c:	8e 83       	std	Y+6, r24	; 0x06
    125e:	3f c0       	rjmp	.+126    	; 0x12de <SSD_viddisplyNum+0x338>
	else if (__tmp > 65535)
    1260:	68 85       	ldd	r22, Y+8	; 0x08
    1262:	79 85       	ldd	r23, Y+9	; 0x09
    1264:	8a 85       	ldd	r24, Y+10	; 0x0a
    1266:	9b 85       	ldd	r25, Y+11	; 0x0b
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	3f ef       	ldi	r19, 0xFF	; 255
    126c:	4f e7       	ldi	r20, 0x7F	; 127
    126e:	57 e4       	ldi	r21, 0x47	; 71
    1270:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1274:	18 16       	cp	r1, r24
    1276:	4c f5       	brge	.+82     	; 0x12ca <SSD_viddisplyNum+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1278:	6c 85       	ldd	r22, Y+12	; 0x0c
    127a:	7d 85       	ldd	r23, Y+13	; 0x0d
    127c:	8e 85       	ldd	r24, Y+14	; 0x0e
    127e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e2       	ldi	r20, 0x20	; 32
    1286:	51 e4       	ldi	r21, 0x41	; 65
    1288:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	9f 83       	std	Y+7, r25	; 0x07
    129e:	8e 83       	std	Y+6, r24	; 0x06
    12a0:	0f c0       	rjmp	.+30     	; 0x12c0 <SSD_viddisplyNum+0x31a>
    12a2:	80 e9       	ldi	r24, 0x90	; 144
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	9d 83       	std	Y+5, r25	; 0x05
    12a8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	9d 81       	ldd	r25, Y+5	; 0x05
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <SSD_viddisplyNum+0x308>
    12b2:	9d 83       	std	Y+5, r25	; 0x05
    12b4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b6:	8e 81       	ldd	r24, Y+6	; 0x06
    12b8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	9f 83       	std	Y+7, r25	; 0x07
    12be:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c0:	8e 81       	ldd	r24, Y+6	; 0x06
    12c2:	9f 81       	ldd	r25, Y+7	; 0x07
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	69 f7       	brne	.-38     	; 0x12a2 <SSD_viddisplyNum+0x2fc>
    12c8:	24 c0       	rjmp	.+72     	; 0x1312 <SSD_viddisplyNum+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ca:	68 85       	ldd	r22, Y+8	; 0x08
    12cc:	79 85       	ldd	r23, Y+9	; 0x09
    12ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	9f 83       	std	Y+7, r25	; 0x07
    12dc:	8e 83       	std	Y+6, r24	; 0x06
    12de:	8e 81       	ldd	r24, Y+6	; 0x06
    12e0:	9f 81       	ldd	r25, Y+7	; 0x07
    12e2:	9b 83       	std	Y+3, r25	; 0x03
    12e4:	8a 83       	std	Y+2, r24	; 0x02
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <SSD_viddisplyNum+0x344>
    12ee:	9b 83       	std	Y+3, r25	; 0x03
    12f0:	8a 83       	std	Y+2, r24	; 0x02
    12f2:	0f c0       	rjmp	.+30     	; 0x1312 <SSD_viddisplyNum+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12f4:	69 89       	ldd	r22, Y+17	; 0x11
    12f6:	7a 89       	ldd	r23, Y+18	; 0x12
    12f8:	8b 89       	ldd	r24, Y+19	; 0x13
    12fa:	9c 89       	ldd	r25, Y+20	; 0x14
    12fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	88 8b       	std	Y+16, r24	; 0x10
    1306:	88 89       	ldd	r24, Y+16	; 0x10
    1308:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	8a 95       	dec	r24
    130e:	f1 f7       	brne	.-4      	; 0x130c <SSD_viddisplyNum+0x366>
    1310:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(500);
}
    1312:	e3 96       	adiw	r28, 0x33	; 51
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <SSD_viddelayWithDisplay_ms>:
void SSD_viddelayWithDisplay_ms(u8 num , u32 delay)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	29 97       	sbiw	r28, 0x09	; 9
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	8d 83       	std	Y+5, r24	; 0x05
    133a:	4e 83       	std	Y+6, r20	; 0x06
    133c:	5f 83       	std	Y+7, r21	; 0x07
    133e:	68 87       	std	Y+8, r22	; 0x08
    1340:	79 87       	std	Y+9, r23	; 0x09
	u32 loc_iter = 0;
    1342:	19 82       	std	Y+1, r1	; 0x01
    1344:	1a 82       	std	Y+2, r1	; 0x02
    1346:	1b 82       	std	Y+3, r1	; 0x03
    1348:	1c 82       	std	Y+4, r1	; 0x04
	for (loc_iter=0 ; loc_iter<delay ; loc_iter++)
    134a:	19 82       	std	Y+1, r1	; 0x01
    134c:	1a 82       	std	Y+2, r1	; 0x02
    134e:	1b 82       	std	Y+3, r1	; 0x03
    1350:	1c 82       	std	Y+4, r1	; 0x04
    1352:	0e c0       	rjmp	.+28     	; 0x1370 <SSD_viddelayWithDisplay_ms+0x4c>
	{
		SSD_viddisplyNum(num);
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <SSD_viddisplyNum>
	_delay_us(500);
}
void SSD_viddelayWithDisplay_ms(u8 num , u32 delay)
{
	u32 loc_iter = 0;
	for (loc_iter=0 ; loc_iter<delay ; loc_iter++)
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	ab 81       	ldd	r26, Y+3	; 0x03
    1360:	bc 81       	ldd	r27, Y+4	; 0x04
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	a1 1d       	adc	r26, r1
    1366:	b1 1d       	adc	r27, r1
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	ab 83       	std	Y+3, r26	; 0x03
    136e:	bc 83       	std	Y+4, r27	; 0x04
    1370:	29 81       	ldd	r18, Y+1	; 0x01
    1372:	3a 81       	ldd	r19, Y+2	; 0x02
    1374:	4b 81       	ldd	r20, Y+3	; 0x03
    1376:	5c 81       	ldd	r21, Y+4	; 0x04
    1378:	8e 81       	ldd	r24, Y+6	; 0x06
    137a:	9f 81       	ldd	r25, Y+7	; 0x07
    137c:	a8 85       	ldd	r26, Y+8	; 0x08
    137e:	b9 85       	ldd	r27, Y+9	; 0x09
    1380:	28 17       	cp	r18, r24
    1382:	39 07       	cpc	r19, r25
    1384:	4a 07       	cpc	r20, r26
    1386:	5b 07       	cpc	r21, r27
    1388:	28 f3       	brcs	.-54     	; 0x1354 <SSD_viddelayWithDisplay_ms+0x30>
	{
		SSD_viddisplyNum(num);
	}
}
    138a:	29 96       	adiw	r28, 0x09	; 9
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <Led_vidinit>:

#include "Dio.h"
#include "Led.h"

void Led_vidinit(void)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2,DIO_OUTPUT);
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	62 e0       	ldi	r22, 0x02	; 2
    13a8:	41 e0       	ldi	r20, 0x01	; 1
    13aa:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7,DIO_OUTPUT);
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	67 e0       	ldi	r22, 0x07	; 7
    13b2:	41 e0       	ldi	r20, 0x01	; 1
    13b4:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN3,DIO_OUTPUT);
    13b8:	83 e0       	ldi	r24, 0x03	; 3
    13ba:	63 e0       	ldi	r22, 0x03	; 3
    13bc:	41 e0       	ldi	r20, 0x01	; 1
    13be:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
}
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <Led_vidledOn>:

void Led_vidledOn(led_ledId_t ledId)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <Led_vidledOn+0x6>
    13ce:	0f 92       	push	r0
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3b 83       	std	Y+3, r19	; 0x03
    13de:	2a 83       	std	Y+2, r18	; 0x02
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	9b 81       	ldd	r25, Y+3	; 0x03
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	91 05       	cpc	r25, r1
    13e8:	79 f0       	breq	.+30     	; 0x1408 <Led_vidledOn+0x40>
    13ea:	2a 81       	ldd	r18, Y+2	; 0x02
    13ec:	3b 81       	ldd	r19, Y+3	; 0x03
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	81 f0       	breq	.+32     	; 0x1414 <Led_vidledOn+0x4c>
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	9b 81       	ldd	r25, Y+3	; 0x03
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	89 f4       	brne	.+34     	; 0x141e <Led_vidledOn+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	62 e0       	ldi	r22, 0x02	; 2
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
    1406:	0b c0       	rjmp	.+22     	; 0x141e <Led_vidledOn+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	67 e0       	ldi	r22, 0x07	; 7
    140c:	41 e0       	ldi	r20, 0x01	; 1
    140e:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
    1412:	05 c0       	rjmp	.+10     	; 0x141e <Led_vidledOn+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    1414:	83 e0       	ldi	r24, 0x03	; 3
    1416:	63 e0       	ldi	r22, 0x03	; 3
    1418:	41 e0       	ldi	r20, 0x01	; 1
    141a:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
		break;
	}
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <Led_vidledOff>:

void Led_vidledOff(led_ledId_t ledId)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <Led_vidledOff+0x6>
    1430:	0f 92       	push	r0
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	3b 83       	std	Y+3, r19	; 0x03
    1440:	2a 83       	std	Y+2, r18	; 0x02
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	9b 81       	ldd	r25, Y+3	; 0x03
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	91 05       	cpc	r25, r1
    144a:	79 f0       	breq	.+30     	; 0x146a <Led_vidledOff+0x40>
    144c:	2a 81       	ldd	r18, Y+2	; 0x02
    144e:	3b 81       	ldd	r19, Y+3	; 0x03
    1450:	22 30       	cpi	r18, 0x02	; 2
    1452:	31 05       	cpc	r19, r1
    1454:	81 f0       	breq	.+32     	; 0x1476 <Led_vidledOff+0x4c>
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	9b 81       	ldd	r25, Y+3	; 0x03
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	89 f4       	brne	.+34     	; 0x1480 <Led_vidledOff+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    145e:	82 e0       	ldi	r24, 0x02	; 2
    1460:	62 e0       	ldi	r22, 0x02	; 2
    1462:	40 e0       	ldi	r20, 0x00	; 0
    1464:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
    1468:	0b c0       	rjmp	.+22     	; 0x1480 <Led_vidledOff+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	67 e0       	ldi	r22, 0x07	; 7
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
    1474:	05 c0       	rjmp	.+10     	; 0x1480 <Led_vidledOff+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    1476:	83 e0       	ldi	r24, 0x03	; 3
    1478:	63 e0       	ldi	r22, 0x03	; 3
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
		break;
	}
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <Led_vidledToggle>:

void Led_vidledToggle(led_ledId_t ledId)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <Led_vidledToggle+0x6>
    1492:	0f 92       	push	r0
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3b 83       	std	Y+3, r19	; 0x03
    14a2:	2a 83       	std	Y+2, r18	; 0x02
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	9b 81       	ldd	r25, Y+3	; 0x03
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	91 05       	cpc	r25, r1
    14ac:	71 f0       	breq	.+28     	; 0x14ca <Led_vidledToggle+0x3e>
    14ae:	2a 81       	ldd	r18, Y+2	; 0x02
    14b0:	3b 81       	ldd	r19, Y+3	; 0x03
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	71 f0       	breq	.+28     	; 0x14d4 <Led_vidledToggle+0x48>
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	9b 81       	ldd	r25, Y+3	; 0x03
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	71 f4       	brne	.+28     	; 0x14dc <Led_vidledToggle+0x50>
		{
		case LED0:
			Dio_vidflipChanel(DIO_PORTC, DIO_PIN2);
    14c0:	82 e0       	ldi	r24, 0x02	; 2
    14c2:	62 e0       	ldi	r22, 0x02	; 2
    14c4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <Dio_vidflipChanel>
    14c8:	09 c0       	rjmp	.+18     	; 0x14dc <Led_vidledToggle+0x50>
			break;

		case LED1:
			Dio_vidflipChanel(DIO_PORTC, DIO_PIN7);
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	67 e0       	ldi	r22, 0x07	; 7
    14ce:	0e 94 d7 15 	call	0x2bae	; 0x2bae <Dio_vidflipChanel>
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <Led_vidledToggle+0x50>
			break;

		case LED2:
			Dio_vidflipChanel(DIO_PORTD, DIO_PIN3);
    14d4:	83 e0       	ldi	r24, 0x03	; 3
    14d6:	63 e0       	ldi	r22, 0x03	; 3
    14d8:	0e 94 d7 15 	call	0x2bae	; 0x2bae <Dio_vidflipChanel>
			break;
		}
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <LM35_vidInit>:
 */

#include "LM35.h"

void LM35_vidInit(void)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
	ADC_vidInit();
    14f0:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <ADC_vidInit>
}
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <LM35_u16TempRead>:

u16 LM35_u16TempRead(void)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <LM35_u16TempRead+0x6>
    1500:	00 d0       	rcall	.+0      	; 0x1502 <LM35_u16TempRead+0x8>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <LM35_u16TempRead+0xa>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
	f64 loc_adcRead =0;
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a0 e0       	ldi	r26, 0x00	; 0
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	8b 83       	std	Y+3, r24	; 0x03
    1512:	9c 83       	std	Y+4, r25	; 0x04
    1514:	ad 83       	std	Y+5, r26	; 0x05
    1516:	be 83       	std	Y+6, r27	; 0x06
	u16 loc_temp =0;
    1518:	1a 82       	std	Y+2, r1	; 0x02
    151a:	19 82       	std	Y+1, r1	; 0x01

	loc_adcRead = ADC_f64ADCRead (ADC_CHANNEL1);
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	0e 94 02 17 	call	0x2e04	; 0x2e04 <ADC_f64ADCRead>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	8b 83       	std	Y+3, r24	; 0x03
    1528:	9c 83       	std	Y+4, r25	; 0x04
    152a:	ad 83       	std	Y+5, r26	; 0x05
    152c:	be 83       	std	Y+6, r27	; 0x06
	loc_temp = loc_adcRead / 10;
    152e:	6b 81       	ldd	r22, Y+3	; 0x03
    1530:	7c 81       	ldd	r23, Y+4	; 0x04
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e2       	ldi	r20, 0x20	; 32
    153c:	51 e4       	ldi	r21, 0x41	; 65
    153e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01

	return loc_temp;
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
}
    155a:	26 96       	adiw	r28, 0x06	; 6
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <Lcd_vidinit>:
#include "Dio.h"
#include <util/delay.h>
#define LCD_MASK (0x0F)

void Lcd_vidinit(void)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	e4 97       	sbiw	r28, 0x34	; 52
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
	//configure
	Dio_vidconfigChanel(DIO_PORTB , DIO_PIN1 , DIO_OUTPUT);
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	61 e0       	ldi	r22, 0x01	; 1
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB , DIO_PIN2 , DIO_OUTPUT);
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	62 e0       	ldi	r22, 0x02	; 2
    158e:	41 e0       	ldi	r20, 0x01	; 1
    1590:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB , DIO_PIN3 , DIO_OUTPUT);
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	63 e0       	ldi	r22, 0x03	; 3
    1598:	41 e0       	ldi	r20, 0x01	; 1
    159a:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>

	//configure data pins as output
	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN4 , DIO_OUTPUT);
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	64 e0       	ldi	r22, 0x04	; 4
    15a2:	41 e0       	ldi	r20, 0x01	; 1
    15a4:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN5 , DIO_OUTPUT);
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	65 e0       	ldi	r22, 0x05	; 5
    15ac:	41 e0       	ldi	r20, 0x01	; 1
    15ae:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN6 , DIO_OUTPUT);
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	66 e0       	ldi	r22, 0x06	; 6
    15b6:	41 e0       	ldi	r20, 0x01	; 1
    15b8:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN7 , DIO_OUTPUT);
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	67 e0       	ldi	r22, 0x07	; 7
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>

	//Always write on LCD
	Dio_vidwriteChanel(DIO_PORTB , DIO_PIN2 , DIO_LOW);
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	62 e0       	ldi	r22, 0x02	; 2
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a0 e7       	ldi	r26, 0x70	; 112
    15d6:	b1 e4       	ldi	r27, 0x41	; 65
    15d8:	89 ab       	std	Y+49, r24	; 0x31
    15da:	9a ab       	std	Y+50, r25	; 0x32
    15dc:	ab ab       	std	Y+51, r26	; 0x33
    15de:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e0:	69 a9       	ldd	r22, Y+49	; 0x31
    15e2:	7a a9       	ldd	r23, Y+50	; 0x32
    15e4:	8b a9       	ldd	r24, Y+51	; 0x33
    15e6:	9c a9       	ldd	r25, Y+52	; 0x34
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	4a e7       	ldi	r20, 0x7A	; 122
    15ee:	55 e4       	ldi	r21, 0x45	; 69
    15f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	8d a7       	std	Y+45, r24	; 0x2d
    15fa:	9e a7       	std	Y+46, r25	; 0x2e
    15fc:	af a7       	std	Y+47, r26	; 0x2f
    15fe:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1600:	6d a5       	ldd	r22, Y+45	; 0x2d
    1602:	7e a5       	ldd	r23, Y+46	; 0x2e
    1604:	8f a5       	ldd	r24, Y+47	; 0x2f
    1606:	98 a9       	ldd	r25, Y+48	; 0x30
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e8       	ldi	r20, 0x80	; 128
    160e:	5f e3       	ldi	r21, 0x3F	; 63
    1610:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1614:	88 23       	and	r24, r24
    1616:	2c f4       	brge	.+10     	; 0x1622 <Lcd_vidinit+0xb6>
		__ticks = 1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	9c a7       	std	Y+44, r25	; 0x2c
    161e:	8b a7       	std	Y+43, r24	; 0x2b
    1620:	3f c0       	rjmp	.+126    	; 0x16a0 <Lcd_vidinit+0x134>
	else if (__tmp > 65535)
    1622:	6d a5       	ldd	r22, Y+45	; 0x2d
    1624:	7e a5       	ldd	r23, Y+46	; 0x2e
    1626:	8f a5       	ldd	r24, Y+47	; 0x2f
    1628:	98 a9       	ldd	r25, Y+48	; 0x30
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	3f ef       	ldi	r19, 0xFF	; 255
    162e:	4f e7       	ldi	r20, 0x7F	; 127
    1630:	57 e4       	ldi	r21, 0x47	; 71
    1632:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1636:	18 16       	cp	r1, r24
    1638:	4c f5       	brge	.+82     	; 0x168c <Lcd_vidinit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163a:	69 a9       	ldd	r22, Y+49	; 0x31
    163c:	7a a9       	ldd	r23, Y+50	; 0x32
    163e:	8b a9       	ldd	r24, Y+51	; 0x33
    1640:	9c a9       	ldd	r25, Y+52	; 0x34
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e2       	ldi	r20, 0x20	; 32
    1648:	51 e4       	ldi	r21, 0x41	; 65
    164a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	bc 01       	movw	r22, r24
    1654:	cd 01       	movw	r24, r26
    1656:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9c a7       	std	Y+44, r25	; 0x2c
    1660:	8b a7       	std	Y+43, r24	; 0x2b
    1662:	0f c0       	rjmp	.+30     	; 0x1682 <Lcd_vidinit+0x116>
    1664:	80 e9       	ldi	r24, 0x90	; 144
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	9a a7       	std	Y+42, r25	; 0x2a
    166a:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    166c:	89 a5       	ldd	r24, Y+41	; 0x29
    166e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <Lcd_vidinit+0x104>
    1674:	9a a7       	std	Y+42, r25	; 0x2a
    1676:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1678:	8b a5       	ldd	r24, Y+43	; 0x2b
    167a:	9c a5       	ldd	r25, Y+44	; 0x2c
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	9c a7       	std	Y+44, r25	; 0x2c
    1680:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1682:	8b a5       	ldd	r24, Y+43	; 0x2b
    1684:	9c a5       	ldd	r25, Y+44	; 0x2c
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	69 f7       	brne	.-38     	; 0x1664 <Lcd_vidinit+0xf8>
    168a:	14 c0       	rjmp	.+40     	; 0x16b4 <Lcd_vidinit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168c:	6d a5       	ldd	r22, Y+45	; 0x2d
    168e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1690:	8f a5       	ldd	r24, Y+47	; 0x2f
    1692:	98 a9       	ldd	r25, Y+48	; 0x30
    1694:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	9c a7       	std	Y+44, r25	; 0x2c
    169e:	8b a7       	std	Y+43, r24	; 0x2b
    16a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    16a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    16a4:	98 a7       	std	Y+40, r25	; 0x28
    16a6:	8f a3       	std	Y+39, r24	; 0x27
    16a8:	8f a1       	ldd	r24, Y+39	; 0x27
    16aa:	98 a5       	ldd	r25, Y+40	; 0x28
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <Lcd_vidinit+0x140>
    16b0:	98 a7       	std	Y+40, r25	; 0x28
    16b2:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);
	Lcd_vidCmd(0x03);
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <Lcd_vidCmd>
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a0 ea       	ldi	r26, 0xA0	; 160
    16c0:	b0 e4       	ldi	r27, 0x40	; 64
    16c2:	8b a3       	std	Y+35, r24	; 0x23
    16c4:	9c a3       	std	Y+36, r25	; 0x24
    16c6:	ad a3       	std	Y+37, r26	; 0x25
    16c8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ca:	6b a1       	ldd	r22, Y+35	; 0x23
    16cc:	7c a1       	ldd	r23, Y+36	; 0x24
    16ce:	8d a1       	ldd	r24, Y+37	; 0x25
    16d0:	9e a1       	ldd	r25, Y+38	; 0x26
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	4a e7       	ldi	r20, 0x7A	; 122
    16d8:	55 e4       	ldi	r21, 0x45	; 69
    16da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	8f 8f       	std	Y+31, r24	; 0x1f
    16e4:	98 a3       	std	Y+32, r25	; 0x20
    16e6:	a9 a3       	std	Y+33, r26	; 0x21
    16e8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    16ea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16ec:	78 a1       	ldd	r23, Y+32	; 0x20
    16ee:	89 a1       	ldd	r24, Y+33	; 0x21
    16f0:	9a a1       	ldd	r25, Y+34	; 0x22
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16fe:	88 23       	and	r24, r24
    1700:	2c f4       	brge	.+10     	; 0x170c <Lcd_vidinit+0x1a0>
		__ticks = 1;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9e 8f       	std	Y+30, r25	; 0x1e
    1708:	8d 8f       	std	Y+29, r24	; 0x1d
    170a:	3f c0       	rjmp	.+126    	; 0x178a <Lcd_vidinit+0x21e>
	else if (__tmp > 65535)
    170c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    170e:	78 a1       	ldd	r23, Y+32	; 0x20
    1710:	89 a1       	ldd	r24, Y+33	; 0x21
    1712:	9a a1       	ldd	r25, Y+34	; 0x22
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	4f e7       	ldi	r20, 0x7F	; 127
    171a:	57 e4       	ldi	r21, 0x47	; 71
    171c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1720:	18 16       	cp	r1, r24
    1722:	4c f5       	brge	.+82     	; 0x1776 <Lcd_vidinit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1724:	6b a1       	ldd	r22, Y+35	; 0x23
    1726:	7c a1       	ldd	r23, Y+36	; 0x24
    1728:	8d a1       	ldd	r24, Y+37	; 0x25
    172a:	9e a1       	ldd	r25, Y+38	; 0x26
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e2       	ldi	r20, 0x20	; 32
    1732:	51 e4       	ldi	r21, 0x41	; 65
    1734:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9e 8f       	std	Y+30, r25	; 0x1e
    174a:	8d 8f       	std	Y+29, r24	; 0x1d
    174c:	0f c0       	rjmp	.+30     	; 0x176c <Lcd_vidinit+0x200>
    174e:	80 e9       	ldi	r24, 0x90	; 144
    1750:	91 e0       	ldi	r25, 0x01	; 1
    1752:	9c 8f       	std	Y+28, r25	; 0x1c
    1754:	8b 8f       	std	Y+27, r24	; 0x1b
    1756:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1758:	9c 8d       	ldd	r25, Y+28	; 0x1c
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <Lcd_vidinit+0x1ee>
    175e:	9c 8f       	std	Y+28, r25	; 0x1c
    1760:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1762:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1764:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	9e 8f       	std	Y+30, r25	; 0x1e
    176a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    176e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	69 f7       	brne	.-38     	; 0x174e <Lcd_vidinit+0x1e2>
    1774:	14 c0       	rjmp	.+40     	; 0x179e <Lcd_vidinit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1776:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1778:	78 a1       	ldd	r23, Y+32	; 0x20
    177a:	89 a1       	ldd	r24, Y+33	; 0x21
    177c:	9a a1       	ldd	r25, Y+34	; 0x22
    177e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9e 8f       	std	Y+30, r25	; 0x1e
    1788:	8d 8f       	std	Y+29, r24	; 0x1d
    178a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    178c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    178e:	9a 8f       	std	Y+26, r25	; 0x1a
    1790:	89 8f       	std	Y+25, r24	; 0x19
    1792:	89 8d       	ldd	r24, Y+25	; 0x19
    1794:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <Lcd_vidinit+0x22a>
    179a:	9a 8f       	std	Y+26, r25	; 0x1a
    179c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_vidCmd(0x03);
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <Lcd_vidCmd>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a8 ec       	ldi	r26, 0xC8	; 200
    17aa:	b2 e4       	ldi	r27, 0x42	; 66
    17ac:	8d 8b       	std	Y+21, r24	; 0x15
    17ae:	9e 8b       	std	Y+22, r25	; 0x16
    17b0:	af 8b       	std	Y+23, r26	; 0x17
    17b2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17b4:	6d 89       	ldd	r22, Y+21	; 0x15
    17b6:	7e 89       	ldd	r23, Y+22	; 0x16
    17b8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ba:	98 8d       	ldd	r25, Y+24	; 0x18
    17bc:	2b ea       	ldi	r18, 0xAB	; 171
    17be:	3a ea       	ldi	r19, 0xAA	; 170
    17c0:	4a ea       	ldi	r20, 0xAA	; 170
    17c2:	50 e4       	ldi	r21, 0x40	; 64
    17c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	89 8b       	std	Y+17, r24	; 0x11
    17ce:	9a 8b       	std	Y+18, r25	; 0x12
    17d0:	ab 8b       	std	Y+19, r26	; 0x13
    17d2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    17d4:	69 89       	ldd	r22, Y+17	; 0x11
    17d6:	7a 89       	ldd	r23, Y+18	; 0x12
    17d8:	8b 89       	ldd	r24, Y+19	; 0x13
    17da:	9c 89       	ldd	r25, Y+20	; 0x14
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e8       	ldi	r20, 0x80	; 128
    17e2:	5f e3       	ldi	r21, 0x3F	; 63
    17e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17e8:	88 23       	and	r24, r24
    17ea:	1c f4       	brge	.+6      	; 0x17f2 <Lcd_vidinit+0x286>
		__ticks = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	88 8b       	std	Y+16, r24	; 0x10
    17f0:	91 c0       	rjmp	.+290    	; 0x1914 <Lcd_vidinit+0x3a8>
	else if (__tmp > 255)
    17f2:	69 89       	ldd	r22, Y+17	; 0x11
    17f4:	7a 89       	ldd	r23, Y+18	; 0x12
    17f6:	8b 89       	ldd	r24, Y+19	; 0x13
    17f8:	9c 89       	ldd	r25, Y+20	; 0x14
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	4f e7       	ldi	r20, 0x7F	; 127
    1800:	53 e4       	ldi	r21, 0x43	; 67
    1802:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1806:	18 16       	cp	r1, r24
    1808:	0c f0       	brlt	.+2      	; 0x180c <Lcd_vidinit+0x2a0>
    180a:	7b c0       	rjmp	.+246    	; 0x1902 <Lcd_vidinit+0x396>
	{
		_delay_ms(__us / 1000.0);
    180c:	6d 89       	ldd	r22, Y+21	; 0x15
    180e:	7e 89       	ldd	r23, Y+22	; 0x16
    1810:	8f 89       	ldd	r24, Y+23	; 0x17
    1812:	98 8d       	ldd	r25, Y+24	; 0x18
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	4a e7       	ldi	r20, 0x7A	; 122
    181a:	54 e4       	ldi	r21, 0x44	; 68
    181c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	8c 87       	std	Y+12, r24	; 0x0c
    1826:	9d 87       	std	Y+13, r25	; 0x0d
    1828:	ae 87       	std	Y+14, r26	; 0x0e
    182a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182c:	6c 85       	ldd	r22, Y+12	; 0x0c
    182e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1830:	8e 85       	ldd	r24, Y+14	; 0x0e
    1832:	9f 85       	ldd	r25, Y+15	; 0x0f
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	4a e7       	ldi	r20, 0x7A	; 122
    183a:	55 e4       	ldi	r21, 0x45	; 69
    183c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	88 87       	std	Y+8, r24	; 0x08
    1846:	99 87       	std	Y+9, r25	; 0x09
    1848:	aa 87       	std	Y+10, r26	; 0x0a
    184a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    184c:	68 85       	ldd	r22, Y+8	; 0x08
    184e:	79 85       	ldd	r23, Y+9	; 0x09
    1850:	8a 85       	ldd	r24, Y+10	; 0x0a
    1852:	9b 85       	ldd	r25, Y+11	; 0x0b
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	40 e8       	ldi	r20, 0x80	; 128
    185a:	5f e3       	ldi	r21, 0x3F	; 63
    185c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1860:	88 23       	and	r24, r24
    1862:	2c f4       	brge	.+10     	; 0x186e <Lcd_vidinit+0x302>
		__ticks = 1;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	9f 83       	std	Y+7, r25	; 0x07
    186a:	8e 83       	std	Y+6, r24	; 0x06
    186c:	3f c0       	rjmp	.+126    	; 0x18ec <Lcd_vidinit+0x380>
	else if (__tmp > 65535)
    186e:	68 85       	ldd	r22, Y+8	; 0x08
    1870:	79 85       	ldd	r23, Y+9	; 0x09
    1872:	8a 85       	ldd	r24, Y+10	; 0x0a
    1874:	9b 85       	ldd	r25, Y+11	; 0x0b
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	3f ef       	ldi	r19, 0xFF	; 255
    187a:	4f e7       	ldi	r20, 0x7F	; 127
    187c:	57 e4       	ldi	r21, 0x47	; 71
    187e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1882:	18 16       	cp	r1, r24
    1884:	4c f5       	brge	.+82     	; 0x18d8 <Lcd_vidinit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1886:	6c 85       	ldd	r22, Y+12	; 0x0c
    1888:	7d 85       	ldd	r23, Y+13	; 0x0d
    188a:	8e 85       	ldd	r24, Y+14	; 0x0e
    188c:	9f 85       	ldd	r25, Y+15	; 0x0f
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e2       	ldi	r20, 0x20	; 32
    1894:	51 e4       	ldi	r21, 0x41	; 65
    1896:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	9f 83       	std	Y+7, r25	; 0x07
    18ac:	8e 83       	std	Y+6, r24	; 0x06
    18ae:	0f c0       	rjmp	.+30     	; 0x18ce <Lcd_vidinit+0x362>
    18b0:	80 e9       	ldi	r24, 0x90	; 144
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	9d 83       	std	Y+5, r25	; 0x05
    18b6:	8c 83       	std	Y+4, r24	; 0x04
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	9d 81       	ldd	r25, Y+5	; 0x05
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <Lcd_vidinit+0x350>
    18c0:	9d 83       	std	Y+5, r25	; 0x05
    18c2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c4:	8e 81       	ldd	r24, Y+6	; 0x06
    18c6:	9f 81       	ldd	r25, Y+7	; 0x07
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	9f 83       	std	Y+7, r25	; 0x07
    18cc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ce:	8e 81       	ldd	r24, Y+6	; 0x06
    18d0:	9f 81       	ldd	r25, Y+7	; 0x07
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	69 f7       	brne	.-38     	; 0x18b0 <Lcd_vidinit+0x344>
    18d6:	24 c0       	rjmp	.+72     	; 0x1920 <Lcd_vidinit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d8:	68 85       	ldd	r22, Y+8	; 0x08
    18da:	79 85       	ldd	r23, Y+9	; 0x09
    18dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    18de:	9b 85       	ldd	r25, Y+11	; 0x0b
    18e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	9f 83       	std	Y+7, r25	; 0x07
    18ea:	8e 83       	std	Y+6, r24	; 0x06
    18ec:	8e 81       	ldd	r24, Y+6	; 0x06
    18ee:	9f 81       	ldd	r25, Y+7	; 0x07
    18f0:	9b 83       	std	Y+3, r25	; 0x03
    18f2:	8a 83       	std	Y+2, r24	; 0x02
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	9b 81       	ldd	r25, Y+3	; 0x03
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <Lcd_vidinit+0x38c>
    18fc:	9b 83       	std	Y+3, r25	; 0x03
    18fe:	8a 83       	std	Y+2, r24	; 0x02
    1900:	0f c0       	rjmp	.+30     	; 0x1920 <Lcd_vidinit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1902:	69 89       	ldd	r22, Y+17	; 0x11
    1904:	7a 89       	ldd	r23, Y+18	; 0x12
    1906:	8b 89       	ldd	r24, Y+19	; 0x13
    1908:	9c 89       	ldd	r25, Y+20	; 0x14
    190a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	88 8b       	std	Y+16, r24	; 0x10
    1914:	88 89       	ldd	r24, Y+16	; 0x10
    1916:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	8a 95       	dec	r24
    191c:	f1 f7       	brne	.-4      	; 0x191a <Lcd_vidinit+0x3ae>
    191e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_vidCmd(0x03);
    1920:	83 e0       	ldi	r24, 0x03	; 3
    1922:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <Lcd_vidCmd>
	Lcd_vidCmd(0x02);
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <Lcd_vidCmd>
	Lcd_vidCmd(_LCD_4BIT_MODE);
    192c:	88 e2       	ldi	r24, 0x28	; 40
    192e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <Lcd_vidCmd>
}
    1932:	e4 96       	adiw	r28, 0x34	; 52
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <Lcd_VidenablePulse>:

static void Lcd_VidenablePulse(void) //not in .h and static as user will not use it
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	a6 97       	sbiw	r28, 0x26	; 38
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
	//send enable pulse
		Dio_vidwriteChanel(DIO_PORTB , DIO_PIN3 , DIO_HIGH);
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	63 e0       	ldi	r22, 0x03	; 3
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	a0 e8       	ldi	r26, 0x80	; 128
    1968:	bf e3       	ldi	r27, 0x3F	; 63
    196a:	8b a3       	std	Y+35, r24	; 0x23
    196c:	9c a3       	std	Y+36, r25	; 0x24
    196e:	ad a3       	std	Y+37, r26	; 0x25
    1970:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1972:	6b a1       	ldd	r22, Y+35	; 0x23
    1974:	7c a1       	ldd	r23, Y+36	; 0x24
    1976:	8d a1       	ldd	r24, Y+37	; 0x25
    1978:	9e a1       	ldd	r25, Y+38	; 0x26
    197a:	2b ea       	ldi	r18, 0xAB	; 171
    197c:	3a ea       	ldi	r19, 0xAA	; 170
    197e:	4a ea       	ldi	r20, 0xAA	; 170
    1980:	50 e4       	ldi	r21, 0x40	; 64
    1982:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	8f 8f       	std	Y+31, r24	; 0x1f
    198c:	98 a3       	std	Y+32, r25	; 0x20
    198e:	a9 a3       	std	Y+33, r26	; 0x21
    1990:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1992:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1994:	78 a1       	ldd	r23, Y+32	; 0x20
    1996:	89 a1       	ldd	r24, Y+33	; 0x21
    1998:	9a a1       	ldd	r25, Y+34	; 0x22
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e8       	ldi	r20, 0x80	; 128
    19a0:	5f e3       	ldi	r21, 0x3F	; 63
    19a2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19a6:	88 23       	and	r24, r24
    19a8:	1c f4       	brge	.+6      	; 0x19b0 <Lcd_VidenablePulse+0x6c>
		__ticks = 1;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	8e 8f       	std	Y+30, r24	; 0x1e
    19ae:	91 c0       	rjmp	.+290    	; 0x1ad2 <Lcd_VidenablePulse+0x18e>
	else if (__tmp > 255)
    19b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19b2:	78 a1       	ldd	r23, Y+32	; 0x20
    19b4:	89 a1       	ldd	r24, Y+33	; 0x21
    19b6:	9a a1       	ldd	r25, Y+34	; 0x22
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	4f e7       	ldi	r20, 0x7F	; 127
    19be:	53 e4       	ldi	r21, 0x43	; 67
    19c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19c4:	18 16       	cp	r1, r24
    19c6:	0c f0       	brlt	.+2      	; 0x19ca <Lcd_VidenablePulse+0x86>
    19c8:	7b c0       	rjmp	.+246    	; 0x1ac0 <Lcd_VidenablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    19ca:	6b a1       	ldd	r22, Y+35	; 0x23
    19cc:	7c a1       	ldd	r23, Y+36	; 0x24
    19ce:	8d a1       	ldd	r24, Y+37	; 0x25
    19d0:	9e a1       	ldd	r25, Y+38	; 0x26
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	4a e7       	ldi	r20, 0x7A	; 122
    19d8:	54 e4       	ldi	r21, 0x44	; 68
    19da:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	8a 8f       	std	Y+26, r24	; 0x1a
    19e4:	9b 8f       	std	Y+27, r25	; 0x1b
    19e6:	ac 8f       	std	Y+28, r26	; 0x1c
    19e8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ea:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19ec:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19f0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	4a e7       	ldi	r20, 0x7A	; 122
    19f8:	55 e4       	ldi	r21, 0x45	; 69
    19fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	8e 8b       	std	Y+22, r24	; 0x16
    1a04:	9f 8b       	std	Y+23, r25	; 0x17
    1a06:	a8 8f       	std	Y+24, r26	; 0x18
    1a08:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1a0a:	6e 89       	ldd	r22, Y+22	; 0x16
    1a0c:	7f 89       	ldd	r23, Y+23	; 0x17
    1a0e:	88 8d       	ldd	r24, Y+24	; 0x18
    1a10:	99 8d       	ldd	r25, Y+25	; 0x19
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e8       	ldi	r20, 0x80	; 128
    1a18:	5f e3       	ldi	r21, 0x3F	; 63
    1a1a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a1e:	88 23       	and	r24, r24
    1a20:	2c f4       	brge	.+10     	; 0x1a2c <Lcd_VidenablePulse+0xe8>
		__ticks = 1;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	9d 8b       	std	Y+21, r25	; 0x15
    1a28:	8c 8b       	std	Y+20, r24	; 0x14
    1a2a:	3f c0       	rjmp	.+126    	; 0x1aaa <Lcd_VidenablePulse+0x166>
	else if (__tmp > 65535)
    1a2c:	6e 89       	ldd	r22, Y+22	; 0x16
    1a2e:	7f 89       	ldd	r23, Y+23	; 0x17
    1a30:	88 8d       	ldd	r24, Y+24	; 0x18
    1a32:	99 8d       	ldd	r25, Y+25	; 0x19
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	3f ef       	ldi	r19, 0xFF	; 255
    1a38:	4f e7       	ldi	r20, 0x7F	; 127
    1a3a:	57 e4       	ldi	r21, 0x47	; 71
    1a3c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a40:	18 16       	cp	r1, r24
    1a42:	4c f5       	brge	.+82     	; 0x1a96 <Lcd_VidenablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a44:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a46:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a48:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a4a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e2       	ldi	r20, 0x20	; 32
    1a52:	51 e4       	ldi	r21, 0x41	; 65
    1a54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	cd 01       	movw	r24, r26
    1a60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9d 8b       	std	Y+21, r25	; 0x15
    1a6a:	8c 8b       	std	Y+20, r24	; 0x14
    1a6c:	0f c0       	rjmp	.+30     	; 0x1a8c <Lcd_VidenablePulse+0x148>
    1a6e:	80 e9       	ldi	r24, 0x90	; 144
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	9b 8b       	std	Y+19, r25	; 0x13
    1a74:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a76:	8a 89       	ldd	r24, Y+18	; 0x12
    1a78:	9b 89       	ldd	r25, Y+19	; 0x13
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <Lcd_VidenablePulse+0x136>
    1a7e:	9b 8b       	std	Y+19, r25	; 0x13
    1a80:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a82:	8c 89       	ldd	r24, Y+20	; 0x14
    1a84:	9d 89       	ldd	r25, Y+21	; 0x15
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	9d 8b       	std	Y+21, r25	; 0x15
    1a8a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8c:	8c 89       	ldd	r24, Y+20	; 0x14
    1a8e:	9d 89       	ldd	r25, Y+21	; 0x15
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	69 f7       	brne	.-38     	; 0x1a6e <Lcd_VidenablePulse+0x12a>
    1a94:	24 c0       	rjmp	.+72     	; 0x1ade <Lcd_VidenablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a96:	6e 89       	ldd	r22, Y+22	; 0x16
    1a98:	7f 89       	ldd	r23, Y+23	; 0x17
    1a9a:	88 8d       	ldd	r24, Y+24	; 0x18
    1a9c:	99 8d       	ldd	r25, Y+25	; 0x19
    1a9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9d 8b       	std	Y+21, r25	; 0x15
    1aa8:	8c 8b       	std	Y+20, r24	; 0x14
    1aaa:	8c 89       	ldd	r24, Y+20	; 0x14
    1aac:	9d 89       	ldd	r25, Y+21	; 0x15
    1aae:	99 8b       	std	Y+17, r25	; 0x11
    1ab0:	88 8b       	std	Y+16, r24	; 0x10
    1ab2:	88 89       	ldd	r24, Y+16	; 0x10
    1ab4:	99 89       	ldd	r25, Y+17	; 0x11
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <Lcd_VidenablePulse+0x172>
    1aba:	99 8b       	std	Y+17, r25	; 0x11
    1abc:	88 8b       	std	Y+16, r24	; 0x10
    1abe:	0f c0       	rjmp	.+30     	; 0x1ade <Lcd_VidenablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ac0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ac2:	78 a1       	ldd	r23, Y+32	; 0x20
    1ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ad2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ad4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ad6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad8:	8a 95       	dec	r24
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <Lcd_VidenablePulse+0x194>
    1adc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(1);
		Dio_vidwriteChanel(DIO_PORTB , DIO_PIN3 , DIO_LOW);
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	63 e0       	ldi	r22, 0x03	; 3
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a0 e0       	ldi	r26, 0x00	; 0
    1aee:	b0 e4       	ldi	r27, 0x40	; 64
    1af0:	8b 87       	std	Y+11, r24	; 0x0b
    1af2:	9c 87       	std	Y+12, r25	; 0x0c
    1af4:	ad 87       	std	Y+13, r26	; 0x0d
    1af6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a e7       	ldi	r20, 0x7A	; 122
    1b06:	55 e4       	ldi	r21, 0x45	; 69
    1b08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8f 83       	std	Y+7, r24	; 0x07
    1b12:	98 87       	std	Y+8, r25	; 0x08
    1b14:	a9 87       	std	Y+9, r26	; 0x09
    1b16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b18:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1a:	78 85       	ldd	r23, Y+8	; 0x08
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09
    1b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e8       	ldi	r20, 0x80	; 128
    1b26:	5f e3       	ldi	r21, 0x3F	; 63
    1b28:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	2c f4       	brge	.+10     	; 0x1b3a <Lcd_VidenablePulse+0x1f6>
		__ticks = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	3f c0       	rjmp	.+126    	; 0x1bb8 <Lcd_VidenablePulse+0x274>
	else if (__tmp > 65535)
    1b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3c:	78 85       	ldd	r23, Y+8	; 0x08
    1b3e:	89 85       	ldd	r24, Y+9	; 0x09
    1b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	4c f5       	brge	.+82     	; 0x1ba4 <Lcd_VidenablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e2       	ldi	r20, 0x20	; 32
    1b60:	51 e4       	ldi	r21, 0x41	; 65
    1b62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9e 83       	std	Y+6, r25	; 0x06
    1b78:	8d 83       	std	Y+5, r24	; 0x05
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <Lcd_VidenablePulse+0x256>
    1b7c:	80 e9       	ldi	r24, 0x90	; 144
    1b7e:	91 e0       	ldi	r25, 0x01	; 1
    1b80:	9c 83       	std	Y+4, r25	; 0x04
    1b82:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <Lcd_VidenablePulse+0x244>
    1b8c:	9c 83       	std	Y+4, r25	; 0x04
    1b8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	9e 83       	std	Y+6, r25	; 0x06
    1b98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	69 f7       	brne	.-38     	; 0x1b7c <Lcd_VidenablePulse+0x238>
    1ba2:	14 c0       	rjmp	.+40     	; 0x1bcc <Lcd_VidenablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <Lcd_VidenablePulse+0x280>
    1bc8:	9a 83       	std	Y+2, r25	; 0x02
    1bca:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
}
    1bcc:	a6 96       	adiw	r28, 0x26	; 38
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <Lcd_vidDisplayChar>:

void Lcd_vidDisplayChar(u8 chr)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <Lcd_vidDisplayChar+0x6>
    1be4:	0f 92       	push	r0
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	8b 83       	std	Y+3, r24	; 0x03
	//    MSB  LSB
	//0b 1101 1001
	u8 loc_MSB = chr & 0xF0;  //0xF0 = ~LCD_MASK  //1101 0000
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	80 7f       	andi	r24, 0xF0	; 240
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = chr << 4;						  //1001 0000
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	82 95       	swap	r24
    1bf6:	80 7f       	andi	r24, 0xF0	; 240
    1bf8:	89 83       	std	Y+1, r24	; 0x01

	// RS->1
	Dio_vidwriteChanel(DIO_PORTB , DIO_PIN1 , DIO_HIGH);
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	61 e0       	ldi	r22, 0x01	; 1
    1bfe:	41 e0       	ldi	r20, 0x01	; 1
    1c00:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>

	// Write data to MSB
	Dio_vidWriteChanelGroup(DIO_PORTA , loc_MSB , LCD_MASK);
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	6a 81       	ldd	r22, Y+2	; 0x02
    1c08:	4f e0       	ldi	r20, 0x0F	; 15
    1c0a:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Dio_vidWriteChanelGroup>

	//send enable pulse
	Lcd_VidenablePulse();
    1c0e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <Lcd_VidenablePulse>

	// Write data to LSB
	Dio_vidWriteChanelGroup(DIO_PORTA , loc_LSB , LCD_MASK);
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	69 81       	ldd	r22, Y+1	; 0x01
    1c16:	4f e0       	ldi	r20, 0x0F	; 15
    1c18:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Dio_vidWriteChanelGroup>

	//send enable pulse
	Lcd_VidenablePulse();
    1c1c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <Lcd_VidenablePulse>

}
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <Lcd_vidDisplayStr>:

void Lcd_vidDisplayStr(u8 * str)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <Lcd_vidDisplayStr+0x6>
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	9a 83       	std	Y+2, r25	; 0x02
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	0a c0       	rjmp	.+20     	; 0x1c50 <Lcd_vidDisplayStr+0x24>
	while (*str != '\0')
	{
		Lcd_vidDisplayChar(*str);
    1c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c40:	80 81       	ld	r24, Z
    1c42:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <Lcd_vidDisplayChar>
		str++;
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	01 96       	adiw	r24, 0x01	; 1
    1c4c:	9a 83       	std	Y+2, r25	; 0x02
    1c4e:	89 83       	std	Y+1, r24	; 0x01

}

void Lcd_vidDisplayStr(u8 * str)
{
	while (*str != '\0')
    1c50:	e9 81       	ldd	r30, Y+1	; 0x01
    1c52:	fa 81       	ldd	r31, Y+2	; 0x02
    1c54:	80 81       	ld	r24, Z
    1c56:	88 23       	and	r24, r24
    1c58:	89 f7       	brne	.-30     	; 0x1c3c <Lcd_vidDisplayStr+0x10>
	{
		Lcd_vidDisplayChar(*str);
		str++;
	}
}
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <LCD_vidDisplayInt>:

void LCD_vidDisplayInt(u32 num)
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	29 97       	sbiw	r28, 0x09	; 9
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	6e 83       	std	Y+6, r22	; 0x06
    1c7a:	7f 83       	std	Y+7, r23	; 0x07
    1c7c:	88 87       	std	Y+8, r24	; 0x08
    1c7e:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer [5];
	sprintf(buffer , "%d" , num);
    1c80:	8d b7       	in	r24, 0x3d	; 61
    1c82:	9e b7       	in	r25, 0x3e	; 62
    1c84:	08 97       	sbiw	r24, 0x08	; 8
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	9e bf       	out	0x3e, r25	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	8d bf       	out	0x3d, r24	; 61
    1c90:	ed b7       	in	r30, 0x3d	; 61
    1c92:	fe b7       	in	r31, 0x3e	; 62
    1c94:	31 96       	adiw	r30, 0x01	; 1
    1c96:	ce 01       	movw	r24, r28
    1c98:	01 96       	adiw	r24, 0x01	; 1
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
    1c9e:	8b e6       	ldi	r24, 0x6B	; 107
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	93 83       	std	Z+3, r25	; 0x03
    1ca4:	82 83       	std	Z+2, r24	; 0x02
    1ca6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca8:	9f 81       	ldd	r25, Y+7	; 0x07
    1caa:	a8 85       	ldd	r26, Y+8	; 0x08
    1cac:	b9 85       	ldd	r27, Y+9	; 0x09
    1cae:	84 83       	std	Z+4, r24	; 0x04
    1cb0:	95 83       	std	Z+5, r25	; 0x05
    1cb2:	a6 83       	std	Z+6, r26	; 0x06
    1cb4:	b7 83       	std	Z+7, r27	; 0x07
    1cb6:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <sprintf>
    1cba:	8d b7       	in	r24, 0x3d	; 61
    1cbc:	9e b7       	in	r25, 0x3e	; 62
    1cbe:	08 96       	adiw	r24, 0x08	; 8
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	9e bf       	out	0x3e, r25	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplayStr(buffer);
    1cca:	ce 01       	movw	r24, r28
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Lcd_vidDisplayStr>
}
    1cd2:	29 96       	adiw	r28, 0x09	; 9
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <LCD_vidDisplayFloat>:

void LCD_vidDisplayFloat(f64 num)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <LCD_vidDisplayFloat+0x6>
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <LCD_vidDisplayFloat+0x8>
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	69 83       	std	Y+1, r22	; 0x01
    1cf2:	7a 83       	std	Y+2, r23	; 0x02
    1cf4:	8b 83       	std	Y+3, r24	; 0x03
    1cf6:	9c 83       	std	Y+4, r25	; 0x04

}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <Lcd_vidCmd>:

void Lcd_vidCmd(lcd_Cmd_t cmd)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <Lcd_vidCmd+0x6>
    1d0c:	0f 92       	push	r0
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	8b 83       	std	Y+3, r24	; 0x03
	//    MSB  LSB
	//0b 1101 1001
	u8 loc_MSB = cmd & 0xF0;  //0xF0 = ~LCD_MASK  //1101 0000
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	80 7f       	andi	r24, 0xF0	; 240
    1d18:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = cmd << 4;						  //1001 0000
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	82 95       	swap	r24
    1d1e:	80 7f       	andi	r24, 0xF0	; 240
    1d20:	89 83       	std	Y+1, r24	; 0x01

	// RS->0
	Dio_vidwriteChanel(DIO_PORTB , DIO_PIN1 , DIO_LOW);
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	61 e0       	ldi	r22, 0x01	; 1
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>

	// Write data to MSB
	Dio_vidWriteChanelGroup(DIO_PORTA , loc_MSB , LCD_MASK);
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	6a 81       	ldd	r22, Y+2	; 0x02
    1d30:	4f e0       	ldi	r20, 0x0F	; 15
    1d32:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Dio_vidWriteChanelGroup>

	//send enable pulse
	Lcd_VidenablePulse();
    1d36:	0e 94 a2 0c 	call	0x1944	; 0x1944 <Lcd_VidenablePulse>

	// Write data to LSB
	Dio_vidWriteChanelGroup(DIO_PORTA , loc_LSB , LCD_MASK);
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	69 81       	ldd	r22, Y+1	; 0x01
    1d3e:	4f e0       	ldi	r20, 0x0F	; 15
    1d40:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Dio_vidWriteChanelGroup>

	//send enable pulse
	Lcd_VidenablePulse();
    1d44:	0e 94 a2 0c 	call	0x1944	; 0x1944 <Lcd_VidenablePulse>
}
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <LCD_vidRowColumn>:

void LCD_vidRowColumn(u8 row , u8 col)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <LCD_vidRowColumn+0x6>
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <LCD_vidRowColumn+0x8>
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	3c 83       	std	Y+4, r19	; 0x04
    1d6c:	2b 83       	std	Y+3, r18	; 0x03
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9c 81       	ldd	r25, Y+4	; 0x04
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	31 f0       	breq	.+12     	; 0x1d82 <LCD_vidRowColumn+0x2e>
    1d76:	2b 81       	ldd	r18, Y+3	; 0x03
    1d78:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7a:	21 30       	cpi	r18, 0x01	; 1
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	31 f0       	breq	.+12     	; 0x1d8c <LCD_vidRowColumn+0x38>
    1d80:	09 c0       	rjmp	.+18     	; 0x1d94 <LCD_vidRowColumn+0x40>
	{
	case 0:
		Lcd_vidCmd(0x80 + col);
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	80 58       	subi	r24, 0x80	; 128
    1d86:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <Lcd_vidCmd>
    1d8a:	04 c0       	rjmp	.+8      	; 0x1d94 <LCD_vidRowColumn+0x40>
		break;
	case 1:
		Lcd_vidCmd(0xC0 + col);
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	80 54       	subi	r24, 0x40	; 64
    1d90:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <Lcd_vidCmd>
		break;
	}
}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <Keypad_vidInit>:
 */
#include "Keypad.h"
#include "Keypad_Types.h"

void Keypad_vidInit (void)
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
	// configure rows pins as input
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN0 , DIO_INPUT);
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN1 , DIO_INPUT);
    1db4:	82 e0       	ldi	r24, 0x02	; 2
    1db6:	61 e0       	ldi	r22, 0x01	; 1
    1db8:	40 e0       	ldi	r20, 0x00	; 0
    1dba:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN2 , DIO_INPUT);
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	62 e0       	ldi	r22, 0x02	; 2
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN3 , DIO_INPUT);
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	63 e0       	ldi	r22, 0x03	; 3
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>

	//configure Columns pins as outputs
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN4 , DIO_OUTPUT);
    1dd2:	82 e0       	ldi	r24, 0x02	; 2
    1dd4:	64 e0       	ldi	r22, 0x04	; 4
    1dd6:	41 e0       	ldi	r20, 0x01	; 1
    1dd8:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN5 , DIO_OUTPUT);
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	65 e0       	ldi	r22, 0x05	; 5
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN6 , DIO_OUTPUT);
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	66 e0       	ldi	r22, 0x06	; 6
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN7 , DIO_OUTPUT);
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	67 e0       	ldi	r22, 0x07	; 7
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>

	Dio_vidPullUpEnalple(DIO_PORTC , DIO_PIN0);
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <Dio_vidPullUpEnalple>
	Dio_vidPullUpEnalple(DIO_PORTC , DIO_PIN1);
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	61 e0       	ldi	r22, 0x01	; 1
    1e06:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <Dio_vidPullUpEnalple>
	Dio_vidPullUpEnalple(DIO_PORTC , DIO_PIN2);
    1e0a:	82 e0       	ldi	r24, 0x02	; 2
    1e0c:	62 e0       	ldi	r22, 0x02	; 2
    1e0e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <Dio_vidPullUpEnalple>
	Dio_vidPullUpEnalple(DIO_PORTC , DIO_PIN3);
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	63 e0       	ldi	r22, 0x03	; 3
    1e16:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <Dio_vidPullUpEnalple>

	//initialize columns as zero
	Dio_vidWriteChanelGroup(DIO_PORTC , DIO_PIN4 , DIO_LOW);
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	64 e0       	ldi	r22, 0x04	; 4
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Dio_vidWriteChanelGroup>
	Dio_vidWriteChanelGroup(DIO_PORTC , DIO_PIN5 , DIO_LOW);
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	65 e0       	ldi	r22, 0x05	; 5
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Dio_vidWriteChanelGroup>
	Dio_vidWriteChanelGroup(DIO_PORTC , DIO_PIN6 , DIO_LOW);
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	66 e0       	ldi	r22, 0x06	; 6
    1e32:	40 e0       	ldi	r20, 0x00	; 0
    1e34:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Dio_vidWriteChanelGroup>
	Dio_vidWriteChanelGroup(DIO_PORTC , DIO_PIN7 , DIO_LOW);
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	67 e0       	ldi	r22, 0x07	; 7
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Dio_vidWriteChanelGroup>

}
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <Keypad_IsPressed>:

static boolean Keypad_IsPressed(void)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	0f 92       	push	r0
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
	if (
    1e52:	82 e0       	ldi	r24, 0x02	; 2
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	0e 94 44 15 	call	0x2a88	; 0x2a88 <Dio_udtreadChanel>
    1e5a:	88 23       	and	r24, r24
    1e5c:	91 f0       	breq	.+36     	; 0x1e82 <Keypad_IsPressed+0x3a>
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	61 e0       	ldi	r22, 0x01	; 1
    1e62:	0e 94 44 15 	call	0x2a88	; 0x2a88 <Dio_udtreadChanel>
    1e66:	88 23       	and	r24, r24
    1e68:	61 f0       	breq	.+24     	; 0x1e82 <Keypad_IsPressed+0x3a>
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	62 e0       	ldi	r22, 0x02	; 2
    1e6e:	0e 94 44 15 	call	0x2a88	; 0x2a88 <Dio_udtreadChanel>
    1e72:	88 23       	and	r24, r24
    1e74:	31 f0       	breq	.+12     	; 0x1e82 <Keypad_IsPressed+0x3a>
    1e76:	82 e0       	ldi	r24, 0x02	; 2
    1e78:	63 e0       	ldi	r22, 0x03	; 3
    1e7a:	0e 94 44 15 	call	0x2a88	; 0x2a88 <Dio_udtreadChanel>
    1e7e:	88 23       	and	r24, r24
    1e80:	19 f4       	brne	.+6      	; 0x1e88 <Keypad_IsPressed+0x40>
			Dio_udtreadChanel(DIO_PORTC , DIO_PIN1) == DIO_LOW  ||
			Dio_udtreadChanel(DIO_PORTC , DIO_PIN2) == DIO_LOW  ||
			Dio_udtreadChanel(DIO_PORTC , DIO_PIN3) == DIO_LOW
		)
	{
		return TRUE;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	01 c0       	rjmp	.+2      	; 0x1e8a <Keypad_IsPressed+0x42>
	}
	else
	{
		return FALSE;
    1e88:	19 82       	std	Y+1, r1	; 0x01
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <Keypad_GetRow>:

static KP_row_t Keypad_GetRow(void)
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <Keypad_GetRow+0x6>
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
	KP_row_t loc_Button = KP_NOROW;
    1e9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
	if (Dio_udtreadChanel(DIO_PORTC , DIO_PIN0) == DIO_LOW)
    1ea2:	82 e0       	ldi	r24, 0x02	; 2
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	0e 94 44 15 	call	0x2a88	; 0x2a88 <Dio_udtreadChanel>
    1eaa:	88 23       	and	r24, r24
    1eac:	11 f4       	brne	.+4      	; 0x1eb2 <Keypad_GetRow+0x1e>
	{
		loc_Button = KP_ROW0;
    1eae:	1a 82       	std	Y+2, r1	; 0x02
    1eb0:	1d c0       	rjmp	.+58     	; 0x1eec <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC , DIO_PIN0) == DIO_LOW)
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	60 e0       	ldi	r22, 0x00	; 0
    1eb6:	0e 94 44 15 	call	0x2a88	; 0x2a88 <Dio_udtreadChanel>
    1eba:	88 23       	and	r24, r24
    1ebc:	19 f4       	brne	.+6      	; 0x1ec4 <Keypad_GetRow+0x30>
	{
		loc_Button = KP_ROW1;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	8a 83       	std	Y+2, r24	; 0x02
    1ec2:	14 c0       	rjmp	.+40     	; 0x1eec <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC , DIO_PIN0) == DIO_LOW)
    1ec4:	82 e0       	ldi	r24, 0x02	; 2
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	0e 94 44 15 	call	0x2a88	; 0x2a88 <Dio_udtreadChanel>
    1ecc:	88 23       	and	r24, r24
    1ece:	19 f4       	brne	.+6      	; 0x1ed6 <Keypad_GetRow+0x42>
	{
		loc_Button = KP_ROW2;
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	8a 83       	std	Y+2, r24	; 0x02
    1ed4:	0b c0       	rjmp	.+22     	; 0x1eec <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC , DIO_PIN0) == DIO_LOW)
    1ed6:	82 e0       	ldi	r24, 0x02	; 2
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	0e 94 44 15 	call	0x2a88	; 0x2a88 <Dio_udtreadChanel>
    1ede:	88 23       	and	r24, r24
    1ee0:	19 f4       	brne	.+6      	; 0x1ee8 <Keypad_GetRow+0x54>
	{
		loc_Button = KP_ROW3;
    1ee2:	83 e0       	ldi	r24, 0x03	; 3
    1ee4:	8a 83       	std	Y+2, r24	; 0x02
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <Keypad_GetRow+0x58>
	}
	else
	{
		KP_row_t loc_Button = KP_NOROW;
    1ee8:	8f ef       	ldi	r24, 0xFF	; 255
    1eea:	89 83       	std	Y+1, r24	; 0x01
	}

	return loc_Button;
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <Keypad_GetColumn>:

static KP_column_t Keypad_GetColumn(KP_row_t current_row)
{
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <Keypad_GetColumn+0x6>
    1efe:	0f 92       	push	r0
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	8b 83       	std	Y+3, r24	; 0x03
	KP_column_t loc_ButtonCol = KP_NOCOLUMN;
    1f06:	8f ef       	ldi	r24, 0xFF	; 255
    1f08:	8a 83       	std	Y+2, r24	; 0x02

	Dio_vidwriteChanel(DIO_PORTC , DIO_PIN0 , DIO_LOW);
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	60 e0       	ldi	r22, 0x00	; 0
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC , DIO_PIN1 , DIO_HIGH);
    1f14:	82 e0       	ldi	r24, 0x02	; 2
    1f16:	61 e0       	ldi	r22, 0x01	; 1
    1f18:	41 e0       	ldi	r20, 0x01	; 1
    1f1a:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC , DIO_PIN2 , DIO_HIGH);
    1f1e:	82 e0       	ldi	r24, 0x02	; 2
    1f20:	62 e0       	ldi	r22, 0x02	; 2
    1f22:	41 e0       	ldi	r20, 0x01	; 1
    1f24:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC , DIO_PIN3 , DIO_HIGH);
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	63 e0       	ldi	r22, 0x03	; 3
    1f2c:	41 e0       	ldi	r20, 0x01	; 1
    1f2e:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>

	if (Keypad_GetRow() == current_row)
    1f32:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <Keypad_GetRow>
    1f36:	98 2f       	mov	r25, r24
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	98 17       	cp	r25, r24
    1f3c:	11 f4       	brne	.+4      	; 0x1f42 <Keypad_GetColumn+0x4a>
	{
		loc_ButtonCol = KP_COL0;
    1f3e:	1a 82       	std	Y+2, r1	; 0x02
    1f40:	59 c0       	rjmp	.+178    	; 0x1ff4 <Keypad_GetColumn+0xfc>
	}
	else
	{
		Dio_vidwriteChanel(DIO_PORTC , DIO_PIN0 , DIO_HIGH);
    1f42:	82 e0       	ldi	r24, 0x02	; 2
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC , DIO_PIN1 , DIO_LOW);
    1f4c:	82 e0       	ldi	r24, 0x02	; 2
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC , DIO_PIN2 , DIO_HIGH);
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	62 e0       	ldi	r22, 0x02	; 2
    1f5a:	41 e0       	ldi	r20, 0x01	; 1
    1f5c:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC , DIO_PIN3 , DIO_HIGH);
    1f60:	82 e0       	ldi	r24, 0x02	; 2
    1f62:	63 e0       	ldi	r22, 0x03	; 3
    1f64:	41 e0       	ldi	r20, 0x01	; 1
    1f66:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>

		if (Keypad_GetRow() == current_row)
    1f6a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <Keypad_GetRow>
    1f6e:	98 2f       	mov	r25, r24
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	98 17       	cp	r25, r24
    1f74:	19 f4       	brne	.+6      	; 0x1f7c <Keypad_GetColumn+0x84>
		{
			loc_ButtonCol = KP_COL1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	8a 83       	std	Y+2, r24	; 0x02
    1f7a:	3c c0       	rjmp	.+120    	; 0x1ff4 <Keypad_GetColumn+0xfc>
		}
		else
		{
			Dio_vidwriteChanel(DIO_PORTC , DIO_PIN0 , DIO_HIGH);
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	41 e0       	ldi	r20, 0x01	; 1
    1f82:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC , DIO_PIN1 , DIO_HIGH);
    1f86:	82 e0       	ldi	r24, 0x02	; 2
    1f88:	61 e0       	ldi	r22, 0x01	; 1
    1f8a:	41 e0       	ldi	r20, 0x01	; 1
    1f8c:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC , DIO_PIN2 , DIO_LOW);
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	62 e0       	ldi	r22, 0x02	; 2
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC , DIO_PIN3 , DIO_HIGH);
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	63 e0       	ldi	r22, 0x03	; 3
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>

			if (Keypad_GetRow() == current_row)
    1fa4:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <Keypad_GetRow>
    1fa8:	98 2f       	mov	r25, r24
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	98 17       	cp	r25, r24
    1fae:	19 f4       	brne	.+6      	; 0x1fb6 <Keypad_GetColumn+0xbe>
			{
				loc_ButtonCol = KP_COL2;
    1fb0:	82 e0       	ldi	r24, 0x02	; 2
    1fb2:	8a 83       	std	Y+2, r24	; 0x02
    1fb4:	1f c0       	rjmp	.+62     	; 0x1ff4 <Keypad_GetColumn+0xfc>
			}
			else
			{
				Dio_vidwriteChanel(DIO_PORTC , DIO_PIN0 , DIO_HIGH);
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	60 e0       	ldi	r22, 0x00	; 0
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC , DIO_PIN1 , DIO_HIGH);
    1fc0:	82 e0       	ldi	r24, 0x02	; 2
    1fc2:	61 e0       	ldi	r22, 0x01	; 1
    1fc4:	41 e0       	ldi	r20, 0x01	; 1
    1fc6:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC , DIO_PIN2 , DIO_HIGH);
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	62 e0       	ldi	r22, 0x02	; 2
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC , DIO_PIN3 , DIO_LOW);
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	63 e0       	ldi	r22, 0x03	; 3
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>

				if (Keypad_GetRow() == current_row)
    1fde:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <Keypad_GetRow>
    1fe2:	98 2f       	mov	r25, r24
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	98 17       	cp	r25, r24
    1fe8:	19 f4       	brne	.+6      	; 0x1ff0 <Keypad_GetColumn+0xf8>
				{
					loc_ButtonCol = KP_COL3;
    1fea:	83 e0       	ldi	r24, 0x03	; 3
    1fec:	8a 83       	std	Y+2, r24	; 0x02
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <Keypad_GetColumn+0xfc>
				}
				else
				{
					KP_column_t loc_ButtonCol = KP_NOCOLUMN;
    1ff0:	8f ef       	ldi	r24, 0xFF	; 255
    1ff2:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
	}
	return loc_ButtonCol;
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <Keypad_u8GetKeypad>:

u8 Keypad_u8GetKeypad (void)
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	00 d0       	rcall	.+0      	; 0x2008 <Keypad_u8GetKeypad+0x6>
    2008:	0f 92       	push	r0
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Key = 0xFF;
    200e:	8f ef       	ldi	r24, 0xFF	; 255
    2010:	8b 83       	std	Y+3, r24	; 0x03
	KP_row_t loc_Row = KP_NOROW;
    2012:	8f ef       	ldi	r24, 0xFF	; 255
    2014:	8a 83       	std	Y+2, r24	; 0x02
	KP_row_t loc_Col = KP_NOCOLUMN;
    2016:	8f ef       	ldi	r24, 0xFF	; 255
    2018:	89 83       	std	Y+1, r24	; 0x01

	Keypad_vidInit(); // to return the keypad to original case after first press
    201a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <Keypad_vidInit>

	// check if the keypad is pressed or not
	if (Keypad_IsPressed() == TRUE)
    201e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <Keypad_IsPressed>
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	f1 f4       	brne	.+60     	; 0x2062 <Keypad_u8GetKeypad+0x60>
	{
		//get pressed key row
		loc_Row = Keypad_GetRow();
    2026:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <Keypad_GetRow>
    202a:	8a 83       	std	Y+2, r24	; 0x02

		//get pressed key column
		loc_Col = Keypad_GetColumn(loc_Row);
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <Keypad_GetColumn>
    2032:	89 83       	std	Y+1, r24	; 0x01

		// loc_key = keypad_layout [row] [column]
		Loc_Key = Keypad_layout [loc_Row][loc_Col];
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	48 2f       	mov	r20, r24
    2038:	55 27       	eor	r21, r21
    203a:	47 fd       	sbrc	r20, 7
    203c:	50 95       	com	r21
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	28 2f       	mov	r18, r24
    2042:	33 27       	eor	r19, r19
    2044:	27 fd       	sbrc	r18, 7
    2046:	30 95       	com	r19
    2048:	ca 01       	movw	r24, r20
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	82 0f       	add	r24, r18
    2054:	93 1f       	adc	r25, r19
    2056:	fc 01       	movw	r30, r24
    2058:	ea 58       	subi	r30, 0x8A	; 138
    205a:	fe 4f       	sbci	r31, 0xFE	; 254
    205c:	80 81       	ld	r24, Z
    205e:	8b 83       	std	Y+3, r24	; 0x03
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <Keypad_u8GetKeypad+0x64>
	}
	else
	{
		//do nothing
		Loc_Key = 0xFF;
    2062:	8f ef       	ldi	r24, 0xFF	; 255
    2064:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_Key;
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <Buzzer_vidinit>:

#include "Dio.h"
#include "Buzzer.h"

void Buzzer_vidinit(void)
{
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN3 ,DIO_OUTPUT);
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	63 e0       	ldi	r22, 0x03	; 3
    2080:	41 e0       	ldi	r20, 0x01	; 1
    2082:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
}
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <Buzzer_vidBuzzerOn>:

void Buzzer_vidBuzzerOn(void)
{
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	63 e0       	ldi	r22, 0x03	; 3
    2098:	41 e0       	ldi	r20, 0x01	; 1
    209a:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
}
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <Buzzer_vidBuzzerOff>:

void Buzzer_vidBuzzerOff(void)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_LOW);
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	63 e0       	ldi	r22, 0x03	; 3
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	0e 94 05 14 	call	0x280a	; 0x280a <Dio_vidwriteChanel>
}
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <Button_vidbuttonInit>:
 */
#include "Button.h"
#include "Dio.h"

void Button_vidbuttonInit(void)
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	60 e0       	ldi	r22, 0x00	; 0
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN6, DIO_INPUT);
    20ce:	83 e0       	ldi	r24, 0x03	; 3
    20d0:	66 e0       	ldi	r22, 0x06	; 6
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
    20d8:	83 e0       	ldi	r24, 0x03	; 3
    20da:	62 e0       	ldi	r22, 0x02	; 2
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	0e 94 22 13 	call	0x2644	; 0x2644 <Dio_vidconfigChanel>
}
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <Button_udtbuttonStatus>:


button_butStatus_t Button_udtbuttonStatus(button_buttonId_t butnId)
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <Button_udtbuttonStatus+0x6>
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <Button_udtbuttonStatus+0x8>
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	8a 83       	std	Y+2, r24	; 0x02
	button_butStatus_t locBtnStatus = RELAEASED;
    20f6:	19 82       	std	Y+1, r1	; 0x01
	switch (butnId)
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	3c 83       	std	Y+4, r19	; 0x04
    2100:	2b 83       	std	Y+3, r18	; 0x03
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	81 30       	cpi	r24, 0x01	; 1
    2108:	91 05       	cpc	r25, r1
    210a:	a1 f0       	breq	.+40     	; 0x2134 <Button_udtbuttonStatus+0x4c>
    210c:	2b 81       	ldd	r18, Y+3	; 0x03
    210e:	3c 81       	ldd	r19, Y+4	; 0x04
    2110:	22 30       	cpi	r18, 0x02	; 2
    2112:	31 05       	cpc	r19, r1
    2114:	d1 f0       	breq	.+52     	; 0x214a <Button_udtbuttonStatus+0x62>
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	01 f5       	brne	.+64     	; 0x215e <Button_udtbuttonStatus+0x76>
	{
		case BUTTON0:
			if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	0e 94 44 15 	call	0x2a88	; 0x2a88 <Dio_udtreadChanel>
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	19 f4       	brne	.+6      	; 0x2130 <Button_udtbuttonStatus+0x48>
			{
				locBtnStatus = PRESSED;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	17 c0       	rjmp	.+46     	; 0x215e <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    2130:	19 82       	std	Y+1, r1	; 0x01
    2132:	15 c0       	rjmp	.+42     	; 0x215e <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON1:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN6) == DIO_HIGH)
    2134:	83 e0       	ldi	r24, 0x03	; 3
    2136:	66 e0       	ldi	r22, 0x06	; 6
    2138:	0e 94 44 15 	call	0x2a88	; 0x2a88 <Dio_udtreadChanel>
    213c:	81 30       	cpi	r24, 0x01	; 1
    213e:	19 f4       	brne	.+6      	; 0x2146 <Button_udtbuttonStatus+0x5e>
			{
				locBtnStatus = PRESSED;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	0c c0       	rjmp	.+24     	; 0x215e <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    2146:	19 82       	std	Y+1, r1	; 0x01
    2148:	0a c0       	rjmp	.+20     	; 0x215e <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON2:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
    214a:	83 e0       	ldi	r24, 0x03	; 3
    214c:	62 e0       	ldi	r22, 0x02	; 2
    214e:	0e 94 44 15 	call	0x2a88	; 0x2a88 <Dio_udtreadChanel>
    2152:	81 30       	cpi	r24, 0x01	; 1
    2154:	19 f4       	brne	.+6      	; 0x215c <Button_udtbuttonStatus+0x74>
			{
				locBtnStatus = PRESSED;
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	01 c0       	rjmp	.+2      	; 0x215e <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    215c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
	}
	return locBtnStatus;
    215e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <USART_Init>:

#include "UART.h"


void USART_Init(u32 baud)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	28 97       	sbiw	r28, 0x08	; 8
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	6d 83       	std	Y+5, r22	; 0x05
    2184:	7e 83       	std	Y+6, r23	; 0x06
    2186:	8f 83       	std	Y+7, r24	; 0x07
    2188:	98 87       	std	Y+8, r25	; 0x08
	/*	Calculate UBRR Value	*/
	u32 loc_UBBR_val = ((F_OSC/(16*baud))-1);
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	9e 81       	ldd	r25, Y+6	; 0x06
    218e:	af 81       	ldd	r26, Y+7	; 0x07
    2190:	b8 85       	ldd	r27, Y+8	; 0x08
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	aa 1f       	adc	r26, r26
    2198:	bb 1f       	adc	r27, r27
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	aa 1f       	adc	r26, r26
    21a0:	bb 1f       	adc	r27, r27
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	aa 1f       	adc	r26, r26
    21a8:	bb 1f       	adc	r27, r27
    21aa:	88 0f       	add	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	aa 1f       	adc	r26, r26
    21b0:	bb 1f       	adc	r27, r27
    21b2:	9c 01       	movw	r18, r24
    21b4:	ad 01       	movw	r20, r26
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	94 e2       	ldi	r25, 0x24	; 36
    21ba:	a4 ef       	ldi	r26, 0xF4	; 244
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__udivmodsi4>
    21c6:	da 01       	movw	r26, r20
    21c8:	c9 01       	movw	r24, r18
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	a1 09       	sbc	r26, r1
    21ce:	b1 09       	sbc	r27, r1
    21d0:	89 83       	std	Y+1, r24	; 0x01
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	ab 83       	std	Y+3, r26	; 0x03
    21d6:	bc 83       	std	Y+4, r27	; 0x04
	/* Set baud rate */
	UART_UBRRH_REG = loc_UBBR_val>>8;
    21d8:	e0 e4       	ldi	r30, 0x40	; 64
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	9a 81       	ldd	r25, Y+2	; 0x02
    21e0:	ab 81       	ldd	r26, Y+3	; 0x03
    21e2:	bc 81       	ldd	r27, Y+4	; 0x04
    21e4:	89 2f       	mov	r24, r25
    21e6:	9a 2f       	mov	r25, r26
    21e8:	ab 2f       	mov	r26, r27
    21ea:	bb 27       	eor	r27, r27
    21ec:	80 83       	st	Z, r24
	UART_UBRRL_REG = loc_UBBR_val;
    21ee:	e9 e2       	ldi	r30, 0x29	; 41
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UART_UCSRB_REG = (1<<UART_RXEN_BIT)|(1<<UART_TXEN_BIT);
    21f6:	ea e2       	ldi	r30, 0x2A	; 42
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	88 e1       	ldi	r24, 0x18	; 24
    21fc:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UART_UCSRC_REG = (1<<UART_URSEL_BIT)|(1<<UART_USBS_BIT)|(3<<UART_UCSZ0_BIT);
    21fe:	e0 e4       	ldi	r30, 0x40	; 64
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	8e e8       	ldi	r24, 0x8E	; 142
    2204:	80 83       	st	Z, r24
}
    2206:	28 96       	adiw	r28, 0x08	; 8
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <USART_TransmitChar>:

void USART_TransmitChar(u8 data)
{
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	0f 92       	push	r0
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (CHECK_BIT(UART_UCSRA_REG,UART_UDRE_BIT) == 0)
    2224:	eb e2       	ldi	r30, 0x2B	; 43
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	82 95       	swap	r24
    222c:	86 95       	lsr	r24
    222e:	87 70       	andi	r24, 0x07	; 7
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	81 70       	andi	r24, 0x01	; 1
    2236:	90 70       	andi	r25, 0x00	; 0
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	a1 f3       	breq	.-24     	; 0x2224 <USART_TransmitChar+0xc>
	{
		;
	}
		/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
    223c:	ec e2       	ldi	r30, 0x2C	; 44
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	80 83       	st	Z, r24
}
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <USART_Receive>:

u8 USART_Receive(void)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while (CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 0)
    2254:	eb e2       	ldi	r30, 0x2B	; 43
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	88 23       	and	r24, r24
    225c:	dc f7       	brge	.-10     	; 0x2254 <USART_Receive+0x8>
	{
		;
	}
	/* Get and return received data from buffer */
	return UART_UDR_REG;
    225e:	ec e2       	ldi	r30, 0x2C	; 44
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
}
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <USART_Receive_Blocking>:



u8 USART_Receive_Blocking(void)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while (CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 0)
    2272:	eb e2       	ldi	r30, 0x2B	; 43
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	88 23       	and	r24, r24
    227a:	dc f7       	brge	.-10     	; 0x2272 <USART_Receive_Blocking+0x8>
	{
		;
	}
	/* Get and return received data from buffer */
	return UART_UDR_REG;
    227c:	ec e2       	ldi	r30, 0x2C	; 44
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
}
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <USART_Receive_NonBlocking>:
u8 USART_Receive_NonBlocking(void)
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	0f 92       	push	r0
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	if (CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 1)
    2292:	eb e2       	ldi	r30, 0x2B	; 43
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	88 1f       	adc	r24, r24
    229a:	88 27       	eor	r24, r24
    229c:	88 1f       	adc	r24, r24
    229e:	81 30       	cpi	r24, 0x01	; 1
    22a0:	29 f4       	brne	.+10     	; 0x22ac <USART_Receive_NonBlocking+0x24>
	{
		/* Get and return received data from buffer */
		return UART_UDR_REG;
    22a2:	ec e2       	ldi	r30, 0x2C	; 44
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	89 83       	std	Y+1, r24	; 0x01
    22aa:	01 c0       	rjmp	.+2      	; 0x22ae <USART_Receive_NonBlocking+0x26>
	}
	else
	{
		return 0;
    22ac:	19 82       	std	Y+1, r1	; 0x01
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
	}

}
    22b0:	0f 90       	pop	r0
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <USART_TransmitStr>:
void USART_TransmitStr(u8 *str)
{
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	00 d0       	rcall	.+0      	; 0x22be <USART_TransmitStr+0x6>
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	0a c0       	rjmp	.+20     	; 0x22dc <USART_TransmitStr+0x24>
	while (*str != '\0')
	{
		USART_TransmitChar(*str);
    22c8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ca:	fa 81       	ldd	r31, Y+2	; 0x02
    22cc:	80 81       	ld	r24, Z
    22ce:	0e 94 0c 11 	call	0x2218	; 0x2218 <USART_TransmitChar>
		str++;
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	9a 81       	ldd	r25, Y+2	; 0x02
    22d6:	01 96       	adiw	r24, 0x01	; 1
    22d8:	9a 83       	std	Y+2, r25	; 0x02
    22da:	89 83       	std	Y+1, r24	; 0x01
	}

}
void USART_TransmitStr(u8 *str)
{
	while (*str != '\0')
    22dc:	e9 81       	ldd	r30, Y+1	; 0x01
    22de:	fa 81       	ldd	r31, Y+2	; 0x02
    22e0:	80 81       	ld	r24, Z
    22e2:	88 23       	and	r24, r24
    22e4:	89 f7       	brne	.-30     	; 0x22c8 <USART_TransmitStr+0x10>
	{
		USART_TransmitChar(*str);
		str++;
	}
}
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <USART_Receive_InterruptEnable>:
void USART_Receive_InterruptEnable(void)
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_UCSRB_REG,UART_RXCIE_BIT);
    22f8:	aa e2       	ldi	r26, 0x2A	; 42
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	ea e2       	ldi	r30, 0x2A	; 42
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	80 68       	ori	r24, 0x80	; 128
    2304:	8c 93       	st	X, r24
}
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <Timer0_vidInit>:
 *      Author: faster
 */
#include "Timer0.h"

void Timer0_vidInit(void)
{
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62

}
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <Timer0_vidSetPreload>:

void Timer0_vidSetPreload(u8 preload)
{
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	0f 92       	push	r0
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	89 83       	std	Y+1, r24	; 0x01

}
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <Timer0_vidTimerStart>:

void Timer0_vidTimerStart(timer0_clk_t clk)
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	0f 92       	push	r0
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	89 83       	std	Y+1, r24	; 0x01

}
    233a:	0f 90       	pop	r0
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <Timer0_vidTimerStop>:

void Timer0_vidTimerStop(void)
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62

}
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <Timer0_vidEnableOVInterrupt>:

void Timer0_vidEnableOVInterrupt(void)
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62

}
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <Timer0_vidDisableOVInterrupt>:
void Timer0_vidDisableOVInterrupt(void)
{
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62

}
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <I2C_MasterInit>:
 */

#include "I2C.h"

void I2C_MasterInit (void)
{
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62

}
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <I2C_SlaveInit>:
void I2C_SlaveInit (void)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62

}
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <I2C_StartCondition>:

void I2C_StartCondition (void)
{
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62

}
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <I2C_StopCondition>:
void I2C_StopCondition (void)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62

}
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <I2C_SlaveAddressWrite>:

void I2C_SlaveAddressWrite (u8 address)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	0f 92       	push	r0
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	89 83       	std	Y+1, r24	; 0x01

}
    23b0:	0f 90       	pop	r0
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <I2C_SlaveAddresRaed>:
void I2C_SlaveAddresRaed (u8 address)
{
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	0f 92       	push	r0
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	89 83       	std	Y+1, r24	; 0x01

}
    23c4:	0f 90       	pop	r0
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <I2C_SlaveAddresWrite>:
void I2C_SlaveAddresWrite (u8 address)
{
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	0f 92       	push	r0
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	89 83       	std	Y+1, r24	; 0x01

}
    23d8:	0f 90       	pop	r0
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <GINT_vidEnableAllInetrrupts>:
#include "GINT.h"
#include "Bit_Math.h"


void GINT_vidEnableAllInetrrupts (void)
{
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_REG , 7);
    23e8:	af e5       	ldi	r26, 0x5F	; 95
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	ef e5       	ldi	r30, 0x5F	; 95
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	80 68       	ori	r24, 0x80	; 128
    23f4:	8c 93       	st	X, r24
}
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <GINT_vidDisableAllInetrrupts>:

void GINT_vidDisableAllInetrrupts (void)
{
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_REG , 7);
    2404:	af e5       	ldi	r26, 0x5F	; 95
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	ef e5       	ldi	r30, 0x5F	; 95
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	8f 77       	andi	r24, 0x7F	; 127
    2410:	8c 93       	st	X, r24
}
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <ExtInt_vidConfigExtInt>:
#include "ExInt_Reg.h"
#include "ExInt.h"
#include "Std_Types.h"

void ExtInt_vidConfigExtInt (extint_id_t INTid   , extint_sensectrl  senseCtrl)
{
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	00 d0       	rcall	.+0      	; 0x241e <ExtInt_vidConfigExtInt+0x6>
    241e:	00 d0       	rcall	.+0      	; 0x2420 <ExtInt_vidConfigExtInt+0x8>
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	6a 83       	std	Y+2, r22	; 0x02
	switch (INTid)
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	28 2f       	mov	r18, r24
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	3c 83       	std	Y+4, r19	; 0x04
    2430:	2b 83       	std	Y+3, r18	; 0x03
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	9c 81       	ldd	r25, Y+4	; 0x04
    2436:	81 30       	cpi	r24, 0x01	; 1
    2438:	91 05       	cpc	r25, r1
    243a:	09 f4       	brne	.+2      	; 0x243e <ExtInt_vidConfigExtInt+0x26>
    243c:	5a c0       	rjmp	.+180    	; 0x24f2 <ExtInt_vidConfigExtInt+0xda>
    243e:	2b 81       	ldd	r18, Y+3	; 0x03
    2440:	3c 81       	ldd	r19, Y+4	; 0x04
    2442:	22 30       	cpi	r18, 0x02	; 2
    2444:	31 05       	cpc	r19, r1
    2446:	09 f4       	brne	.+2      	; 0x244a <ExtInt_vidConfigExtInt+0x32>
    2448:	a3 c0       	rjmp	.+326    	; 0x2590 <ExtInt_vidConfigExtInt+0x178>
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	09 f0       	breq	.+2      	; 0x2454 <ExtInt_vidConfigExtInt+0x3c>
    2452:	ba c0       	rjmp	.+372    	; 0x25c8 <ExtInt_vidConfigExtInt+0x1b0>
	{
	case EXT_INT0:
		if (senseCtrl == EXT_RISING_EDGE)
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	81 30       	cpi	r24, 0x01	; 1
    2458:	79 f4       	brne	.+30     	; 0x2478 <ExtInt_vidConfigExtInt+0x60>
		{
			SET_BIT(EXTINT_MCUCR_REG , 0);
    245a:	a5 e5       	ldi	r26, 0x55	; 85
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e5 e5       	ldi	r30, 0x55	; 85
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	81 60       	ori	r24, 0x01	; 1
    2466:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG , 1);
    2468:	a5 e5       	ldi	r26, 0x55	; 85
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	e5 e5       	ldi	r30, 0x55	; 85
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	82 60       	ori	r24, 0x02	; 2
    2474:	8c 93       	st	X, r24
    2476:	35 c0       	rjmp	.+106    	; 0x24e2 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (senseCtrl == EXT_FALLING_EDGE)
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	88 23       	and	r24, r24
    247c:	79 f4       	brne	.+30     	; 0x249c <ExtInt_vidConfigExtInt+0x84>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG , 0);
    247e:	a5 e5       	ldi	r26, 0x55	; 85
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e5 e5       	ldi	r30, 0x55	; 85
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	8e 7f       	andi	r24, 0xFE	; 254
    248a:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG , 1);
    248c:	a5 e5       	ldi	r26, 0x55	; 85
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e5 e5       	ldi	r30, 0x55	; 85
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	82 60       	ori	r24, 0x02	; 2
    2498:	8c 93       	st	X, r24
    249a:	23 c0       	rjmp	.+70     	; 0x24e2 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (senseCtrl == EXT_BOTH_EDGE)
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	82 30       	cpi	r24, 0x02	; 2
    24a0:	79 f4       	brne	.+30     	; 0x24c0 <ExtInt_vidConfigExtInt+0xa8>
		{
			SET_BIT(EXTINT_MCUCR_REG , 0);
    24a2:	a5 e5       	ldi	r26, 0x55	; 85
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e5 e5       	ldi	r30, 0x55	; 85
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	81 60       	ori	r24, 0x01	; 1
    24ae:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG , 1);
    24b0:	a5 e5       	ldi	r26, 0x55	; 85
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e5 e5       	ldi	r30, 0x55	; 85
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	8d 7f       	andi	r24, 0xFD	; 253
    24bc:	8c 93       	st	X, r24
    24be:	11 c0       	rjmp	.+34     	; 0x24e2 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (senseCtrl == EXT_LOW_EDGE)
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	83 30       	cpi	r24, 0x03	; 3
    24c4:	71 f4       	brne	.+28     	; 0x24e2 <ExtInt_vidConfigExtInt+0xca>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG , 0);
    24c6:	a5 e5       	ldi	r26, 0x55	; 85
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e5 e5       	ldi	r30, 0x55	; 85
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	8e 7f       	andi	r24, 0xFE	; 254
    24d2:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG , 1);
    24d4:	a5 e5       	ldi	r26, 0x55	; 85
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e5 e5       	ldi	r30, 0x55	; 85
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	8d 7f       	andi	r24, 0xFD	; 253
    24e0:	8c 93       	st	X, r24
		}

		SET_BIT(EXTINT_GICR_REG , INT0_EN_BIT);
    24e2:	ab e5       	ldi	r26, 0x5B	; 91
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	eb e5       	ldi	r30, 0x5B	; 91
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	80 64       	ori	r24, 0x40	; 64
    24ee:	8c 93       	st	X, r24
    24f0:	6b c0       	rjmp	.+214    	; 0x25c8 <ExtInt_vidConfigExtInt+0x1b0>
		break;


	case EXT_INT1:
		if (senseCtrl == EXT_RISING_EDGE)
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	81 30       	cpi	r24, 0x01	; 1
    24f6:	79 f4       	brne	.+30     	; 0x2516 <ExtInt_vidConfigExtInt+0xfe>
		{
			SET_BIT(EXTINT_MCUCR_REG , 2);
    24f8:	a5 e5       	ldi	r26, 0x55	; 85
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e5 e5       	ldi	r30, 0x55	; 85
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	84 60       	ori	r24, 0x04	; 4
    2504:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG , 3);
    2506:	a5 e5       	ldi	r26, 0x55	; 85
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e5 e5       	ldi	r30, 0x55	; 85
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	88 60       	ori	r24, 0x08	; 8
    2512:	8c 93       	st	X, r24
    2514:	35 c0       	rjmp	.+106    	; 0x2580 <ExtInt_vidConfigExtInt+0x168>
		}
		else if (senseCtrl == EXT_FALLING_EDGE)
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	88 23       	and	r24, r24
    251a:	79 f4       	brne	.+30     	; 0x253a <ExtInt_vidConfigExtInt+0x122>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG , 2);
    251c:	a5 e5       	ldi	r26, 0x55	; 85
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	e5 e5       	ldi	r30, 0x55	; 85
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	8b 7f       	andi	r24, 0xFB	; 251
    2528:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG , 3);
    252a:	a5 e5       	ldi	r26, 0x55	; 85
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	e5 e5       	ldi	r30, 0x55	; 85
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	88 60       	ori	r24, 0x08	; 8
    2536:	8c 93       	st	X, r24
    2538:	23 c0       	rjmp	.+70     	; 0x2580 <ExtInt_vidConfigExtInt+0x168>
		}
		else if (senseCtrl == EXT_BOTH_EDGE)
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	82 30       	cpi	r24, 0x02	; 2
    253e:	79 f4       	brne	.+30     	; 0x255e <ExtInt_vidConfigExtInt+0x146>
		{
			SET_BIT(EXTINT_MCUCR_REG , 2);
    2540:	a5 e5       	ldi	r26, 0x55	; 85
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e5 e5       	ldi	r30, 0x55	; 85
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	84 60       	ori	r24, 0x04	; 4
    254c:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG , 3);
    254e:	a5 e5       	ldi	r26, 0x55	; 85
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	e5 e5       	ldi	r30, 0x55	; 85
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	87 7f       	andi	r24, 0xF7	; 247
    255a:	8c 93       	st	X, r24
    255c:	11 c0       	rjmp	.+34     	; 0x2580 <ExtInt_vidConfigExtInt+0x168>
		}
		else if (senseCtrl == EXT_LOW_EDGE)
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	83 30       	cpi	r24, 0x03	; 3
    2562:	71 f4       	brne	.+28     	; 0x2580 <ExtInt_vidConfigExtInt+0x168>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG , 2);
    2564:	a5 e5       	ldi	r26, 0x55	; 85
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	e5 e5       	ldi	r30, 0x55	; 85
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	8b 7f       	andi	r24, 0xFB	; 251
    2570:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG , 3);
    2572:	a5 e5       	ldi	r26, 0x55	; 85
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	e5 e5       	ldi	r30, 0x55	; 85
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	87 7f       	andi	r24, 0xF7	; 247
    257e:	8c 93       	st	X, r24
		}

		SET_BIT(EXTINT_GICR_REG , INT1_EN_BIT);
    2580:	ab e5       	ldi	r26, 0x5B	; 91
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	eb e5       	ldi	r30, 0x5B	; 91
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	80 68       	ori	r24, 0x80	; 128
    258c:	8c 93       	st	X, r24
    258e:	1c c0       	rjmp	.+56     	; 0x25c8 <ExtInt_vidConfigExtInt+0x1b0>
		break;


	case EXT_INT2:

		if (senseCtrl == EXT_RISING_EDGE)
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	81 30       	cpi	r24, 0x01	; 1
    2594:	41 f4       	brne	.+16     	; 0x25a6 <ExtInt_vidConfigExtInt+0x18e>
		{
			SET_BIT(EXTINT_MCUCSR_REG , 6);
    2596:	a4 e5       	ldi	r26, 0x54	; 84
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	e4 e5       	ldi	r30, 0x54	; 84
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	80 64       	ori	r24, 0x40	; 64
    25a2:	8c 93       	st	X, r24
    25a4:	0a c0       	rjmp	.+20     	; 0x25ba <ExtInt_vidConfigExtInt+0x1a2>
		}
		else if (senseCtrl == EXT_FALLING_EDGE)
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	88 23       	and	r24, r24
    25aa:	39 f4       	brne	.+14     	; 0x25ba <ExtInt_vidConfigExtInt+0x1a2>
		{
			CLEAR_BIT(EXTINT_MCUCSR_REG , 6);
    25ac:	a4 e5       	ldi	r26, 0x54	; 84
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	e4 e5       	ldi	r30, 0x54	; 84
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	8f 7b       	andi	r24, 0xBF	; 191
    25b8:	8c 93       	st	X, r24
		}

		SET_BIT(EXTINT_GICR_REG , INT2_EN_BIT);
    25ba:	ab e5       	ldi	r26, 0x5B	; 91
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	eb e5       	ldi	r30, 0x5B	; 91
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	80 62       	ori	r24, 0x20	; 32
    25c6:	8c 93       	st	X, r24
		break;
	}
}
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <ExtInt_vidDisapleExtInt>:

void ExtInt_vidDisapleExtInt (extint_id_t INTid )
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	00 d0       	rcall	.+0      	; 0x25dc <ExtInt_vidDisapleExtInt+0x6>
    25dc:	0f 92       	push	r0
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	89 83       	std	Y+1, r24	; 0x01
	switch (INTid)
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	3b 83       	std	Y+3, r19	; 0x03
    25ec:	2a 83       	std	Y+2, r18	; 0x02
    25ee:	8a 81       	ldd	r24, Y+2	; 0x02
    25f0:	9b 81       	ldd	r25, Y+3	; 0x03
    25f2:	81 30       	cpi	r24, 0x01	; 1
    25f4:	91 05       	cpc	r25, r1
    25f6:	89 f0       	breq	.+34     	; 0x261a <ExtInt_vidDisapleExtInt+0x44>
    25f8:	2a 81       	ldd	r18, Y+2	; 0x02
    25fa:	3b 81       	ldd	r19, Y+3	; 0x03
    25fc:	22 30       	cpi	r18, 0x02	; 2
    25fe:	31 05       	cpc	r19, r1
    2600:	a1 f0       	breq	.+40     	; 0x262a <ExtInt_vidDisapleExtInt+0x54>
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	9b 81       	ldd	r25, Y+3	; 0x03
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	b9 f4       	brne	.+46     	; 0x2638 <ExtInt_vidDisapleExtInt+0x62>
	{
	case EXT_INT0:
		SET_BIT(EXTINT_GICR_REG,INT0_EN_BIT);
    260a:	ab e5       	ldi	r26, 0x5B	; 91
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	eb e5       	ldi	r30, 0x5B	; 91
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	80 64       	ori	r24, 0x40	; 64
    2616:	8c 93       	st	X, r24
    2618:	0f c0       	rjmp	.+30     	; 0x2638 <ExtInt_vidDisapleExtInt+0x62>
		break;

	case EXT_INT1:
		SET_BIT(EXTINT_GICR_REG,INT1_EN_BIT);
    261a:	ab e5       	ldi	r26, 0x5B	; 91
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	eb e5       	ldi	r30, 0x5B	; 91
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	80 68       	ori	r24, 0x80	; 128
    2626:	8c 93       	st	X, r24
    2628:	07 c0       	rjmp	.+14     	; 0x2638 <ExtInt_vidDisapleExtInt+0x62>
		break;

	case EXT_INT2:
		SET_BIT(EXTINT_GICR_REG,INT2_EN_BIT);
    262a:	ab e5       	ldi	r26, 0x5B	; 91
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	eb e5       	ldi	r30, 0x5B	; 91
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	80 62       	ori	r24, 0x20	; 32
    2636:	8c 93       	st	X, r24
		break;
	}
}
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <Dio_vidconfigChanel>:
#include "Dio.h"
#include "Bit_Math.h"


void Dio_vidconfigChanel(dio_port_t port, dio_pin_t pin,dio_dir_t dir)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	00 d0       	rcall	.+0      	; 0x264a <Dio_vidconfigChanel+0x6>
    264a:	00 d0       	rcall	.+0      	; 0x264c <Dio_vidconfigChanel+0x8>
    264c:	0f 92       	push	r0
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	6a 83       	std	Y+2, r22	; 0x02
    2656:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	3d 83       	std	Y+5, r19	; 0x05
    2660:	2c 83       	std	Y+4, r18	; 0x04
    2662:	8c 81       	ldd	r24, Y+4	; 0x04
    2664:	9d 81       	ldd	r25, Y+5	; 0x05
    2666:	81 30       	cpi	r24, 0x01	; 1
    2668:	91 05       	cpc	r25, r1
    266a:	09 f4       	brne	.+2      	; 0x266e <Dio_vidconfigChanel+0x2a>
    266c:	43 c0       	rjmp	.+134    	; 0x26f4 <Dio_vidconfigChanel+0xb0>
    266e:	2c 81       	ldd	r18, Y+4	; 0x04
    2670:	3d 81       	ldd	r19, Y+5	; 0x05
    2672:	22 30       	cpi	r18, 0x02	; 2
    2674:	31 05       	cpc	r19, r1
    2676:	2c f4       	brge	.+10     	; 0x2682 <Dio_vidconfigChanel+0x3e>
    2678:	8c 81       	ldd	r24, Y+4	; 0x04
    267a:	9d 81       	ldd	r25, Y+5	; 0x05
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	71 f0       	breq	.+28     	; 0x269c <Dio_vidconfigChanel+0x58>
    2680:	bc c0       	rjmp	.+376    	; 0x27fa <Dio_vidconfigChanel+0x1b6>
    2682:	2c 81       	ldd	r18, Y+4	; 0x04
    2684:	3d 81       	ldd	r19, Y+5	; 0x05
    2686:	22 30       	cpi	r18, 0x02	; 2
    2688:	31 05       	cpc	r19, r1
    268a:	09 f4       	brne	.+2      	; 0x268e <Dio_vidconfigChanel+0x4a>
    268c:	5f c0       	rjmp	.+190    	; 0x274c <Dio_vidconfigChanel+0x108>
    268e:	8c 81       	ldd	r24, Y+4	; 0x04
    2690:	9d 81       	ldd	r25, Y+5	; 0x05
    2692:	83 30       	cpi	r24, 0x03	; 3
    2694:	91 05       	cpc	r25, r1
    2696:	09 f4       	brne	.+2      	; 0x269a <Dio_vidconfigChanel+0x56>
    2698:	85 c0       	rjmp	.+266    	; 0x27a4 <Dio_vidconfigChanel+0x160>
    269a:	af c0       	rjmp	.+350    	; 0x27fa <Dio_vidconfigChanel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	88 23       	and	r24, r24
    26a0:	a9 f4       	brne	.+42     	; 0x26cc <Dio_vidconfigChanel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    26a2:	aa e3       	ldi	r26, 0x3A	; 58
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	ea e3       	ldi	r30, 0x3A	; 58
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	48 2f       	mov	r20, r24
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	28 2f       	mov	r18, r24
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	02 2e       	mov	r0, r18
    26ba:	02 c0       	rjmp	.+4      	; 0x26c0 <Dio_vidconfigChanel+0x7c>
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	0a 94       	dec	r0
    26c2:	e2 f7       	brpl	.-8      	; 0x26bc <Dio_vidconfigChanel+0x78>
    26c4:	80 95       	com	r24
    26c6:	84 23       	and	r24, r20
    26c8:	8c 93       	st	X, r24
    26ca:	97 c0       	rjmp	.+302    	; 0x27fa <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    26cc:	aa e3       	ldi	r26, 0x3A	; 58
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	ea e3       	ldi	r30, 0x3A	; 58
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	48 2f       	mov	r20, r24
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	28 2f       	mov	r18, r24
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	02 2e       	mov	r0, r18
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <Dio_vidconfigChanel+0xa6>
    26e6:	88 0f       	add	r24, r24
    26e8:	99 1f       	adc	r25, r25
    26ea:	0a 94       	dec	r0
    26ec:	e2 f7       	brpl	.-8      	; 0x26e6 <Dio_vidconfigChanel+0xa2>
    26ee:	84 2b       	or	r24, r20
    26f0:	8c 93       	st	X, r24
    26f2:	83 c0       	rjmp	.+262    	; 0x27fa <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	88 23       	and	r24, r24
    26f8:	a9 f4       	brne	.+42     	; 0x2724 <Dio_vidconfigChanel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    26fa:	a7 e3       	ldi	r26, 0x37	; 55
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e7 e3       	ldi	r30, 0x37	; 55
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	48 2f       	mov	r20, r24
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	02 2e       	mov	r0, r18
    2712:	02 c0       	rjmp	.+4      	; 0x2718 <Dio_vidconfigChanel+0xd4>
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	0a 94       	dec	r0
    271a:	e2 f7       	brpl	.-8      	; 0x2714 <Dio_vidconfigChanel+0xd0>
    271c:	80 95       	com	r24
    271e:	84 23       	and	r24, r20
    2720:	8c 93       	st	X, r24
    2722:	6b c0       	rjmp	.+214    	; 0x27fa <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    2724:	a7 e3       	ldi	r26, 0x37	; 55
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e7 e3       	ldi	r30, 0x37	; 55
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	48 2f       	mov	r20, r24
    2730:	8a 81       	ldd	r24, Y+2	; 0x02
    2732:	28 2f       	mov	r18, r24
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	02 2e       	mov	r0, r18
    273c:	02 c0       	rjmp	.+4      	; 0x2742 <Dio_vidconfigChanel+0xfe>
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	0a 94       	dec	r0
    2744:	e2 f7       	brpl	.-8      	; 0x273e <Dio_vidconfigChanel+0xfa>
    2746:	84 2b       	or	r24, r20
    2748:	8c 93       	st	X, r24
    274a:	57 c0       	rjmp	.+174    	; 0x27fa <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	88 23       	and	r24, r24
    2750:	a9 f4       	brne	.+42     	; 0x277c <Dio_vidconfigChanel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    2752:	a4 e3       	ldi	r26, 0x34	; 52
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e4 e3       	ldi	r30, 0x34	; 52
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	48 2f       	mov	r20, r24
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	02 2e       	mov	r0, r18
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <Dio_vidconfigChanel+0x12c>
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	0a 94       	dec	r0
    2772:	e2 f7       	brpl	.-8      	; 0x276c <Dio_vidconfigChanel+0x128>
    2774:	80 95       	com	r24
    2776:	84 23       	and	r24, r20
    2778:	8c 93       	st	X, r24
    277a:	3f c0       	rjmp	.+126    	; 0x27fa <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    277c:	a4 e3       	ldi	r26, 0x34	; 52
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e4 e3       	ldi	r30, 0x34	; 52
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	48 2f       	mov	r20, r24
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	02 2e       	mov	r0, r18
    2794:	02 c0       	rjmp	.+4      	; 0x279a <Dio_vidconfigChanel+0x156>
    2796:	88 0f       	add	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	0a 94       	dec	r0
    279c:	e2 f7       	brpl	.-8      	; 0x2796 <Dio_vidconfigChanel+0x152>
    279e:	84 2b       	or	r24, r20
    27a0:	8c 93       	st	X, r24
    27a2:	2b c0       	rjmp	.+86     	; 0x27fa <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (dir == DIO_INPUT)
    27a4:	8b 81       	ldd	r24, Y+3	; 0x03
    27a6:	88 23       	and	r24, r24
    27a8:	a9 f4       	brne	.+42     	; 0x27d4 <Dio_vidconfigChanel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    27aa:	a1 e3       	ldi	r26, 0x31	; 49
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e1 e3       	ldi	r30, 0x31	; 49
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	48 2f       	mov	r20, r24
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	28 2f       	mov	r18, r24
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	02 2e       	mov	r0, r18
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <Dio_vidconfigChanel+0x184>
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	0a 94       	dec	r0
    27ca:	e2 f7       	brpl	.-8      	; 0x27c4 <Dio_vidconfigChanel+0x180>
    27cc:	80 95       	com	r24
    27ce:	84 23       	and	r24, r20
    27d0:	8c 93       	st	X, r24
    27d2:	13 c0       	rjmp	.+38     	; 0x27fa <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    27d4:	a1 e3       	ldi	r26, 0x31	; 49
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e1 e3       	ldi	r30, 0x31	; 49
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	48 2f       	mov	r20, r24
    27e0:	8a 81       	ldd	r24, Y+2	; 0x02
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	02 2e       	mov	r0, r18
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <Dio_vidconfigChanel+0x1ae>
    27ee:	88 0f       	add	r24, r24
    27f0:	99 1f       	adc	r25, r25
    27f2:	0a 94       	dec	r0
    27f4:	e2 f7       	brpl	.-8      	; 0x27ee <Dio_vidconfigChanel+0x1aa>
    27f6:	84 2b       	or	r24, r20
    27f8:	8c 93       	st	X, r24
		}
		break;
	}
}
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <Dio_vidwriteChanel>:

void Dio_vidwriteChanel(dio_port_t port, dio_pin_t pin,dio_level_t level)
{
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	00 d0       	rcall	.+0      	; 0x2810 <Dio_vidwriteChanel+0x6>
    2810:	00 d0       	rcall	.+0      	; 0x2812 <Dio_vidwriteChanel+0x8>
    2812:	0f 92       	push	r0
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	89 83       	std	Y+1, r24	; 0x01
    281a:	6a 83       	std	Y+2, r22	; 0x02
    281c:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	3d 83       	std	Y+5, r19	; 0x05
    2826:	2c 83       	std	Y+4, r18	; 0x04
    2828:	8c 81       	ldd	r24, Y+4	; 0x04
    282a:	9d 81       	ldd	r25, Y+5	; 0x05
    282c:	81 30       	cpi	r24, 0x01	; 1
    282e:	91 05       	cpc	r25, r1
    2830:	09 f4       	brne	.+2      	; 0x2834 <Dio_vidwriteChanel+0x2a>
    2832:	43 c0       	rjmp	.+134    	; 0x28ba <Dio_vidwriteChanel+0xb0>
    2834:	2c 81       	ldd	r18, Y+4	; 0x04
    2836:	3d 81       	ldd	r19, Y+5	; 0x05
    2838:	22 30       	cpi	r18, 0x02	; 2
    283a:	31 05       	cpc	r19, r1
    283c:	2c f4       	brge	.+10     	; 0x2848 <Dio_vidwriteChanel+0x3e>
    283e:	8c 81       	ldd	r24, Y+4	; 0x04
    2840:	9d 81       	ldd	r25, Y+5	; 0x05
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	71 f0       	breq	.+28     	; 0x2862 <Dio_vidwriteChanel+0x58>
    2846:	bc c0       	rjmp	.+376    	; 0x29c0 <Dio_vidwriteChanel+0x1b6>
    2848:	2c 81       	ldd	r18, Y+4	; 0x04
    284a:	3d 81       	ldd	r19, Y+5	; 0x05
    284c:	22 30       	cpi	r18, 0x02	; 2
    284e:	31 05       	cpc	r19, r1
    2850:	09 f4       	brne	.+2      	; 0x2854 <Dio_vidwriteChanel+0x4a>
    2852:	5f c0       	rjmp	.+190    	; 0x2912 <Dio_vidwriteChanel+0x108>
    2854:	8c 81       	ldd	r24, Y+4	; 0x04
    2856:	9d 81       	ldd	r25, Y+5	; 0x05
    2858:	83 30       	cpi	r24, 0x03	; 3
    285a:	91 05       	cpc	r25, r1
    285c:	09 f4       	brne	.+2      	; 0x2860 <Dio_vidwriteChanel+0x56>
    285e:	85 c0       	rjmp	.+266    	; 0x296a <Dio_vidwriteChanel+0x160>
    2860:	af c0       	rjmp	.+350    	; 0x29c0 <Dio_vidwriteChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	81 30       	cpi	r24, 0x01	; 1
    2866:	a1 f4       	brne	.+40     	; 0x2890 <Dio_vidwriteChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    2868:	ab e3       	ldi	r26, 0x3B	; 59
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	eb e3       	ldi	r30, 0x3B	; 59
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	48 2f       	mov	r20, r24
    2874:	8a 81       	ldd	r24, Y+2	; 0x02
    2876:	28 2f       	mov	r18, r24
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	02 2e       	mov	r0, r18
    2880:	02 c0       	rjmp	.+4      	; 0x2886 <Dio_vidwriteChanel+0x7c>
    2882:	88 0f       	add	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	0a 94       	dec	r0
    2888:	e2 f7       	brpl	.-8      	; 0x2882 <Dio_vidwriteChanel+0x78>
    288a:	84 2b       	or	r24, r20
    288c:	8c 93       	st	X, r24
    288e:	98 c0       	rjmp	.+304    	; 0x29c0 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    2890:	ab e3       	ldi	r26, 0x3B	; 59
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	eb e3       	ldi	r30, 0x3B	; 59
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	48 2f       	mov	r20, r24
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	28 2f       	mov	r18, r24
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	02 2e       	mov	r0, r18
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <Dio_vidwriteChanel+0xa4>
    28aa:	88 0f       	add	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	0a 94       	dec	r0
    28b0:	e2 f7       	brpl	.-8      	; 0x28aa <Dio_vidwriteChanel+0xa0>
    28b2:	80 95       	com	r24
    28b4:	84 23       	and	r24, r20
    28b6:	8c 93       	st	X, r24
    28b8:	83 c0       	rjmp	.+262    	; 0x29c0 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	81 30       	cpi	r24, 0x01	; 1
    28be:	a1 f4       	brne	.+40     	; 0x28e8 <Dio_vidwriteChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    28c0:	a8 e3       	ldi	r26, 0x38	; 56
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e8 e3       	ldi	r30, 0x38	; 56
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	48 2f       	mov	r20, r24
    28cc:	8a 81       	ldd	r24, Y+2	; 0x02
    28ce:	28 2f       	mov	r18, r24
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	02 2e       	mov	r0, r18
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <Dio_vidwriteChanel+0xd4>
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	0a 94       	dec	r0
    28e0:	e2 f7       	brpl	.-8      	; 0x28da <Dio_vidwriteChanel+0xd0>
    28e2:	84 2b       	or	r24, r20
    28e4:	8c 93       	st	X, r24
    28e6:	6c c0       	rjmp	.+216    	; 0x29c0 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    28e8:	a8 e3       	ldi	r26, 0x38	; 56
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e8 e3       	ldi	r30, 0x38	; 56
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	48 2f       	mov	r20, r24
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	28 2f       	mov	r18, r24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	02 2e       	mov	r0, r18
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <Dio_vidwriteChanel+0xfc>
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	0a 94       	dec	r0
    2908:	e2 f7       	brpl	.-8      	; 0x2902 <Dio_vidwriteChanel+0xf8>
    290a:	80 95       	com	r24
    290c:	84 23       	and	r24, r20
    290e:	8c 93       	st	X, r24
    2910:	57 c0       	rjmp	.+174    	; 0x29c0 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	81 30       	cpi	r24, 0x01	; 1
    2916:	a1 f4       	brne	.+40     	; 0x2940 <Dio_vidwriteChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    2918:	a5 e3       	ldi	r26, 0x35	; 53
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e5 e3       	ldi	r30, 0x35	; 53
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	48 2f       	mov	r20, r24
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	28 2f       	mov	r18, r24
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	02 2e       	mov	r0, r18
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <Dio_vidwriteChanel+0x12c>
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	0a 94       	dec	r0
    2938:	e2 f7       	brpl	.-8      	; 0x2932 <Dio_vidwriteChanel+0x128>
    293a:	84 2b       	or	r24, r20
    293c:	8c 93       	st	X, r24
    293e:	40 c0       	rjmp	.+128    	; 0x29c0 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    2940:	a5 e3       	ldi	r26, 0x35	; 53
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	e5 e3       	ldi	r30, 0x35	; 53
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	48 2f       	mov	r20, r24
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	28 2f       	mov	r18, r24
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	02 2e       	mov	r0, r18
    2958:	02 c0       	rjmp	.+4      	; 0x295e <Dio_vidwriteChanel+0x154>
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	0a 94       	dec	r0
    2960:	e2 f7       	brpl	.-8      	; 0x295a <Dio_vidwriteChanel+0x150>
    2962:	80 95       	com	r24
    2964:	84 23       	and	r24, r20
    2966:	8c 93       	st	X, r24
    2968:	2b c0       	rjmp	.+86     	; 0x29c0 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	a1 f4       	brne	.+40     	; 0x2998 <Dio_vidwriteChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    2970:	a2 e3       	ldi	r26, 0x32	; 50
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e2 e3       	ldi	r30, 0x32	; 50
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	48 2f       	mov	r20, r24
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	02 2e       	mov	r0, r18
    2988:	02 c0       	rjmp	.+4      	; 0x298e <Dio_vidwriteChanel+0x184>
    298a:	88 0f       	add	r24, r24
    298c:	99 1f       	adc	r25, r25
    298e:	0a 94       	dec	r0
    2990:	e2 f7       	brpl	.-8      	; 0x298a <Dio_vidwriteChanel+0x180>
    2992:	84 2b       	or	r24, r20
    2994:	8c 93       	st	X, r24
    2996:	14 c0       	rjmp	.+40     	; 0x29c0 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    2998:	a2 e3       	ldi	r26, 0x32	; 50
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e2 e3       	ldi	r30, 0x32	; 50
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	48 2f       	mov	r20, r24
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	28 2f       	mov	r18, r24
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	02 2e       	mov	r0, r18
    29b0:	02 c0       	rjmp	.+4      	; 0x29b6 <Dio_vidwriteChanel+0x1ac>
    29b2:	88 0f       	add	r24, r24
    29b4:	99 1f       	adc	r25, r25
    29b6:	0a 94       	dec	r0
    29b8:	e2 f7       	brpl	.-8      	; 0x29b2 <Dio_vidwriteChanel+0x1a8>
    29ba:	80 95       	com	r24
    29bc:	84 23       	and	r24, r20
    29be:	8c 93       	st	X, r24
		}
		break;
	}
}
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	08 95       	ret

000029d0 <Dio_vidWriteChanelGroup>:

void Dio_vidWriteChanelGroup (dio_port_t port , u8 data , u8 mask)
{
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	00 d0       	rcall	.+0      	; 0x29d6 <Dio_vidWriteChanelGroup+0x6>
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <Dio_vidWriteChanelGroup+0x8>
    29d8:	0f 92       	push	r0
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	6a 83       	std	Y+2, r22	; 0x02
    29e2:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	28 2f       	mov	r18, r24
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	3d 83       	std	Y+5, r19	; 0x05
    29ec:	2c 83       	std	Y+4, r18	; 0x04
    29ee:	8c 81       	ldd	r24, Y+4	; 0x04
    29f0:	9d 81       	ldd	r25, Y+5	; 0x05
    29f2:	81 30       	cpi	r24, 0x01	; 1
    29f4:	91 05       	cpc	r25, r1
    29f6:	01 f1       	breq	.+64     	; 0x2a38 <Dio_vidWriteChanelGroup+0x68>
    29f8:	2c 81       	ldd	r18, Y+4	; 0x04
    29fa:	3d 81       	ldd	r19, Y+5	; 0x05
    29fc:	22 30       	cpi	r18, 0x02	; 2
    29fe:	31 05       	cpc	r19, r1
    2a00:	2c f4       	brge	.+10     	; 0x2a0c <Dio_vidWriteChanelGroup+0x3c>
    2a02:	8c 81       	ldd	r24, Y+4	; 0x04
    2a04:	9d 81       	ldd	r25, Y+5	; 0x05
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	61 f0       	breq	.+24     	; 0x2a22 <Dio_vidWriteChanelGroup+0x52>
    2a0a:	36 c0       	rjmp	.+108    	; 0x2a78 <Dio_vidWriteChanelGroup+0xa8>
    2a0c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a0e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a10:	22 30       	cpi	r18, 0x02	; 2
    2a12:	31 05       	cpc	r19, r1
    2a14:	e1 f0       	breq	.+56     	; 0x2a4e <Dio_vidWriteChanelGroup+0x7e>
    2a16:	8c 81       	ldd	r24, Y+4	; 0x04
    2a18:	9d 81       	ldd	r25, Y+5	; 0x05
    2a1a:	83 30       	cpi	r24, 0x03	; 3
    2a1c:	91 05       	cpc	r25, r1
    2a1e:	11 f1       	breq	.+68     	; 0x2a64 <Dio_vidWriteChanelGroup+0x94>
    2a20:	2b c0       	rjmp	.+86     	; 0x2a78 <Dio_vidWriteChanelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data);
    2a22:	ab e3       	ldi	r26, 0x3B	; 59
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	eb e3       	ldi	r30, 0x3B	; 59
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	90 81       	ld	r25, Z
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	98 23       	and	r25, r24
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	89 2b       	or	r24, r25
    2a34:	8c 93       	st	X, r24
    2a36:	20 c0       	rjmp	.+64     	; 0x2a78 <Dio_vidWriteChanelGroup+0xa8>
		break;
	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    2a38:	a8 e3       	ldi	r26, 0x38	; 56
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	e8 e3       	ldi	r30, 0x38	; 56
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	90 81       	ld	r25, Z
    2a42:	8b 81       	ldd	r24, Y+3	; 0x03
    2a44:	98 23       	and	r25, r24
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	89 2b       	or	r24, r25
    2a4a:	8c 93       	st	X, r24
    2a4c:	15 c0       	rjmp	.+42     	; 0x2a78 <Dio_vidWriteChanelGroup+0xa8>
		break;
	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    2a4e:	a5 e3       	ldi	r26, 0x35	; 53
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e5 e3       	ldi	r30, 0x35	; 53
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	90 81       	ld	r25, Z
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	98 23       	and	r25, r24
    2a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5e:	89 2b       	or	r24, r25
    2a60:	8c 93       	st	X, r24
    2a62:	0a c0       	rjmp	.+20     	; 0x2a78 <Dio_vidWriteChanelGroup+0xa8>
		break;
	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    2a64:	a2 e3       	ldi	r26, 0x32	; 50
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e2 e3       	ldi	r30, 0x32	; 50
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	90 81       	ld	r25, Z
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	98 23       	and	r25, r24
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	89 2b       	or	r24, r25
    2a76:	8c 93       	st	X, r24
		break;
	}

}
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <Dio_udtreadChanel+0x6>
    2a8e:	00 d0       	rcall	.+0      	; 0x2a90 <Dio_udtreadChanel+0x8>
    2a90:	0f 92       	push	r0
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	8a 83       	std	Y+2, r24	; 0x02
    2a98:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_result = DIO_LOW;
    2a9a:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
    2a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9e:	28 2f       	mov	r18, r24
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	3d 83       	std	Y+5, r19	; 0x05
    2aa4:	2c 83       	std	Y+4, r18	; 0x04
    2aa6:	4c 81       	ldd	r20, Y+4	; 0x04
    2aa8:	5d 81       	ldd	r21, Y+5	; 0x05
    2aaa:	41 30       	cpi	r20, 0x01	; 1
    2aac:	51 05       	cpc	r21, r1
    2aae:	79 f1       	breq	.+94     	; 0x2b0e <Dio_udtreadChanel+0x86>
    2ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab4:	82 30       	cpi	r24, 0x02	; 2
    2ab6:	91 05       	cpc	r25, r1
    2ab8:	34 f4       	brge	.+12     	; 0x2ac6 <Dio_udtreadChanel+0x3e>
    2aba:	2c 81       	ldd	r18, Y+4	; 0x04
    2abc:	3d 81       	ldd	r19, Y+5	; 0x05
    2abe:	21 15       	cp	r18, r1
    2ac0:	31 05       	cpc	r19, r1
    2ac2:	69 f0       	breq	.+26     	; 0x2ade <Dio_udtreadChanel+0x56>
    2ac4:	6b c0       	rjmp	.+214    	; 0x2b9c <Dio_udtreadChanel+0x114>
    2ac6:	4c 81       	ldd	r20, Y+4	; 0x04
    2ac8:	5d 81       	ldd	r21, Y+5	; 0x05
    2aca:	42 30       	cpi	r20, 0x02	; 2
    2acc:	51 05       	cpc	r21, r1
    2ace:	b9 f1       	breq	.+110    	; 0x2b3e <Dio_udtreadChanel+0xb6>
    2ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ad4:	83 30       	cpi	r24, 0x03	; 3
    2ad6:	91 05       	cpc	r25, r1
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <Dio_udtreadChanel+0x54>
    2ada:	49 c0       	rjmp	.+146    	; 0x2b6e <Dio_udtreadChanel+0xe6>
    2adc:	5f c0       	rjmp	.+190    	; 0x2b9c <Dio_udtreadChanel+0x114>
	{
	case DIO_PORTA:
		if (CHECK_BIT(DIO_PINA_REG,pin) == 1)
    2ade:	e9 e3       	ldi	r30, 0x39	; 57
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aea:	88 2f       	mov	r24, r24
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	a9 01       	movw	r20, r18
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <Dio_udtreadChanel+0x6e>
    2af2:	55 95       	asr	r21
    2af4:	47 95       	ror	r20
    2af6:	8a 95       	dec	r24
    2af8:	e2 f7       	brpl	.-8      	; 0x2af2 <Dio_udtreadChanel+0x6a>
    2afa:	ca 01       	movw	r24, r20
    2afc:	81 70       	andi	r24, 0x01	; 1
    2afe:	90 70       	andi	r25, 0x00	; 0
    2b00:	88 23       	and	r24, r24
    2b02:	19 f0       	breq	.+6      	; 0x2b0a <Dio_udtreadChanel+0x82>
		{
			loc_result = DIO_HIGH;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	49 c0       	rjmp	.+146    	; 0x2b9c <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2b0a:	19 82       	std	Y+1, r1	; 0x01
    2b0c:	47 c0       	rjmp	.+142    	; 0x2b9c <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    2b0e:	e6 e3       	ldi	r30, 0x36	; 54
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	28 2f       	mov	r18, r24
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1a:	88 2f       	mov	r24, r24
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	a9 01       	movw	r20, r18
    2b20:	02 c0       	rjmp	.+4      	; 0x2b26 <Dio_udtreadChanel+0x9e>
    2b22:	55 95       	asr	r21
    2b24:	47 95       	ror	r20
    2b26:	8a 95       	dec	r24
    2b28:	e2 f7       	brpl	.-8      	; 0x2b22 <Dio_udtreadChanel+0x9a>
    2b2a:	ca 01       	movw	r24, r20
    2b2c:	81 70       	andi	r24, 0x01	; 1
    2b2e:	90 70       	andi	r25, 0x00	; 0
    2b30:	88 23       	and	r24, r24
    2b32:	19 f0       	breq	.+6      	; 0x2b3a <Dio_udtreadChanel+0xb2>
		{
			loc_result = DIO_HIGH;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	89 83       	std	Y+1, r24	; 0x01
    2b38:	31 c0       	rjmp	.+98     	; 0x2b9c <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2b3a:	19 82       	std	Y+1, r1	; 0x01
    2b3c:	2f c0       	rjmp	.+94     	; 0x2b9c <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    2b3e:	e3 e3       	ldi	r30, 0x33	; 51
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	88 2f       	mov	r24, r24
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a9 01       	movw	r20, r18
    2b50:	02 c0       	rjmp	.+4      	; 0x2b56 <Dio_udtreadChanel+0xce>
    2b52:	55 95       	asr	r21
    2b54:	47 95       	ror	r20
    2b56:	8a 95       	dec	r24
    2b58:	e2 f7       	brpl	.-8      	; 0x2b52 <Dio_udtreadChanel+0xca>
    2b5a:	ca 01       	movw	r24, r20
    2b5c:	81 70       	andi	r24, 0x01	; 1
    2b5e:	90 70       	andi	r25, 0x00	; 0
    2b60:	88 23       	and	r24, r24
    2b62:	19 f0       	breq	.+6      	; 0x2b6a <Dio_udtreadChanel+0xe2>
		{
			loc_result = DIO_HIGH;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	89 83       	std	Y+1, r24	; 0x01
    2b68:	19 c0       	rjmp	.+50     	; 0x2b9c <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2b6a:	19 82       	std	Y+1, r1	; 0x01
    2b6c:	17 c0       	rjmp	.+46     	; 0x2b9c <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    2b6e:	e0 e3       	ldi	r30, 0x30	; 48
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	28 2f       	mov	r18, r24
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7a:	88 2f       	mov	r24, r24
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a9 01       	movw	r20, r18
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <Dio_udtreadChanel+0xfe>
    2b82:	55 95       	asr	r21
    2b84:	47 95       	ror	r20
    2b86:	8a 95       	dec	r24
    2b88:	e2 f7       	brpl	.-8      	; 0x2b82 <Dio_udtreadChanel+0xfa>
    2b8a:	ca 01       	movw	r24, r20
    2b8c:	81 70       	andi	r24, 0x01	; 1
    2b8e:	90 70       	andi	r25, 0x00	; 0
    2b90:	88 23       	and	r24, r24
    2b92:	19 f0       	breq	.+6      	; 0x2b9a <Dio_udtreadChanel+0x112>
		{
			loc_result = DIO_HIGH;
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	89 83       	std	Y+1, r24	; 0x01
    2b98:	01 c0       	rjmp	.+2      	; 0x2b9c <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2b9a:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_result;
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <Dio_vidflipChanel>:

void Dio_vidflipChanel(dio_port_t port, dio_pin_t pin)
{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	00 d0       	rcall	.+0      	; 0x2bb4 <Dio_vidflipChanel+0x6>
    2bb4:	00 d0       	rcall	.+0      	; 0x2bb6 <Dio_vidflipChanel+0x8>
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
    2bba:	89 83       	std	Y+1, r24	; 0x01
    2bbc:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	28 2f       	mov	r18, r24
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	3c 83       	std	Y+4, r19	; 0x04
    2bc6:	2b 83       	std	Y+3, r18	; 0x03
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	9c 81       	ldd	r25, Y+4	; 0x04
    2bcc:	81 30       	cpi	r24, 0x01	; 1
    2bce:	91 05       	cpc	r25, r1
    2bd0:	49 f1       	breq	.+82     	; 0x2c24 <Dio_vidflipChanel+0x76>
    2bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    2bd4:	3c 81       	ldd	r19, Y+4	; 0x04
    2bd6:	22 30       	cpi	r18, 0x02	; 2
    2bd8:	31 05       	cpc	r19, r1
    2bda:	2c f4       	brge	.+10     	; 0x2be6 <Dio_vidflipChanel+0x38>
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bde:	9c 81       	ldd	r25, Y+4	; 0x04
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	61 f0       	breq	.+24     	; 0x2bfc <Dio_vidflipChanel+0x4e>
    2be4:	5a c0       	rjmp	.+180    	; 0x2c9a <Dio_vidflipChanel+0xec>
    2be6:	2b 81       	ldd	r18, Y+3	; 0x03
    2be8:	3c 81       	ldd	r19, Y+4	; 0x04
    2bea:	22 30       	cpi	r18, 0x02	; 2
    2bec:	31 05       	cpc	r19, r1
    2bee:	71 f1       	breq	.+92     	; 0x2c4c <Dio_vidflipChanel+0x9e>
    2bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf4:	83 30       	cpi	r24, 0x03	; 3
    2bf6:	91 05       	cpc	r25, r1
    2bf8:	e9 f1       	breq	.+122    	; 0x2c74 <Dio_vidflipChanel+0xc6>
    2bfa:	4f c0       	rjmp	.+158    	; 0x2c9a <Dio_vidflipChanel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    2bfc:	ab e3       	ldi	r26, 0x3B	; 59
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	eb e3       	ldi	r30, 0x3B	; 59
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	48 2f       	mov	r20, r24
    2c08:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0a:	28 2f       	mov	r18, r24
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	02 2e       	mov	r0, r18
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <Dio_vidflipChanel+0x6c>
    2c16:	88 0f       	add	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	0a 94       	dec	r0
    2c1c:	e2 f7       	brpl	.-8      	; 0x2c16 <Dio_vidflipChanel+0x68>
    2c1e:	84 27       	eor	r24, r20
    2c20:	8c 93       	st	X, r24
    2c22:	3b c0       	rjmp	.+118    	; 0x2c9a <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    2c24:	a8 e3       	ldi	r26, 0x38	; 56
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	e8 e3       	ldi	r30, 0x38	; 56
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	48 2f       	mov	r20, r24
    2c30:	8a 81       	ldd	r24, Y+2	; 0x02
    2c32:	28 2f       	mov	r18, r24
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	02 2e       	mov	r0, r18
    2c3c:	02 c0       	rjmp	.+4      	; 0x2c42 <Dio_vidflipChanel+0x94>
    2c3e:	88 0f       	add	r24, r24
    2c40:	99 1f       	adc	r25, r25
    2c42:	0a 94       	dec	r0
    2c44:	e2 f7       	brpl	.-8      	; 0x2c3e <Dio_vidflipChanel+0x90>
    2c46:	84 27       	eor	r24, r20
    2c48:	8c 93       	st	X, r24
    2c4a:	27 c0       	rjmp	.+78     	; 0x2c9a <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    2c4c:	a5 e3       	ldi	r26, 0x35	; 53
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e5 e3       	ldi	r30, 0x35	; 53
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	48 2f       	mov	r20, r24
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5a:	28 2f       	mov	r18, r24
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	02 2e       	mov	r0, r18
    2c64:	02 c0       	rjmp	.+4      	; 0x2c6a <Dio_vidflipChanel+0xbc>
    2c66:	88 0f       	add	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	0a 94       	dec	r0
    2c6c:	e2 f7       	brpl	.-8      	; 0x2c66 <Dio_vidflipChanel+0xb8>
    2c6e:	84 27       	eor	r24, r20
    2c70:	8c 93       	st	X, r24
    2c72:	13 c0       	rjmp	.+38     	; 0x2c9a <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    2c74:	a2 e3       	ldi	r26, 0x32	; 50
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	e2 e3       	ldi	r30, 0x32	; 50
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	80 81       	ld	r24, Z
    2c7e:	48 2f       	mov	r20, r24
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	28 2f       	mov	r18, r24
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	02 2e       	mov	r0, r18
    2c8c:	02 c0       	rjmp	.+4      	; 0x2c92 <Dio_vidflipChanel+0xe4>
    2c8e:	88 0f       	add	r24, r24
    2c90:	99 1f       	adc	r25, r25
    2c92:	0a 94       	dec	r0
    2c94:	e2 f7       	brpl	.-8      	; 0x2c8e <Dio_vidflipChanel+0xe0>
    2c96:	84 27       	eor	r24, r20
    2c98:	8c 93       	st	X, r24
		break;
	}
}
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	cf 91       	pop	r28
    2ca4:	df 91       	pop	r29
    2ca6:	08 95       	ret

00002ca8 <Dio_vidPullUpEnalple>:

void Dio_vidPullUpEnalple (dio_port_t port, dio_pin_t pin)
{
    2ca8:	df 93       	push	r29
    2caa:	cf 93       	push	r28
    2cac:	00 d0       	rcall	.+0      	; 0x2cae <Dio_vidPullUpEnalple+0x6>
    2cae:	00 d0       	rcall	.+0      	; 0x2cb0 <Dio_vidPullUpEnalple+0x8>
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	3c 83       	std	Y+4, r19	; 0x04
    2cc0:	2b 83       	std	Y+3, r18	; 0x03
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc6:	81 30       	cpi	r24, 0x01	; 1
    2cc8:	91 05       	cpc	r25, r1
    2cca:	49 f1       	breq	.+82     	; 0x2d1e <Dio_vidPullUpEnalple+0x76>
    2ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    2cce:	3c 81       	ldd	r19, Y+4	; 0x04
    2cd0:	22 30       	cpi	r18, 0x02	; 2
    2cd2:	31 05       	cpc	r19, r1
    2cd4:	2c f4       	brge	.+10     	; 0x2ce0 <Dio_vidPullUpEnalple+0x38>
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	61 f0       	breq	.+24     	; 0x2cf6 <Dio_vidPullUpEnalple+0x4e>
    2cde:	5a c0       	rjmp	.+180    	; 0x2d94 <Dio_vidPullUpEnalple+0xec>
    2ce0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ce2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ce4:	22 30       	cpi	r18, 0x02	; 2
    2ce6:	31 05       	cpc	r19, r1
    2ce8:	71 f1       	breq	.+92     	; 0x2d46 <Dio_vidPullUpEnalple+0x9e>
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	9c 81       	ldd	r25, Y+4	; 0x04
    2cee:	83 30       	cpi	r24, 0x03	; 3
    2cf0:	91 05       	cpc	r25, r1
    2cf2:	e9 f1       	breq	.+122    	; 0x2d6e <Dio_vidPullUpEnalple+0xc6>
    2cf4:	4f c0       	rjmp	.+158    	; 0x2d94 <Dio_vidPullUpEnalple+0xec>
		{
		case DIO_PORTA:
			SET_BIT(DIO_PORTA_REG,pin);
    2cf6:	ab e3       	ldi	r26, 0x3B	; 59
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	eb e3       	ldi	r30, 0x3B	; 59
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	48 2f       	mov	r20, r24
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	02 2e       	mov	r0, r18
    2d0e:	02 c0       	rjmp	.+4      	; 0x2d14 <Dio_vidPullUpEnalple+0x6c>
    2d10:	88 0f       	add	r24, r24
    2d12:	99 1f       	adc	r25, r25
    2d14:	0a 94       	dec	r0
    2d16:	e2 f7       	brpl	.-8      	; 0x2d10 <Dio_vidPullUpEnalple+0x68>
    2d18:	84 2b       	or	r24, r20
    2d1a:	8c 93       	st	X, r24
    2d1c:	3b c0       	rjmp	.+118    	; 0x2d94 <Dio_vidPullUpEnalple+0xec>
			break;

		case DIO_PORTB:
			SET_BIT(DIO_PORTB_REG,pin);
    2d1e:	a8 e3       	ldi	r26, 0x38	; 56
    2d20:	b0 e0       	ldi	r27, 0x00	; 0
    2d22:	e8 e3       	ldi	r30, 0x38	; 56
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	48 2f       	mov	r20, r24
    2d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2c:	28 2f       	mov	r18, r24
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	02 2e       	mov	r0, r18
    2d36:	02 c0       	rjmp	.+4      	; 0x2d3c <Dio_vidPullUpEnalple+0x94>
    2d38:	88 0f       	add	r24, r24
    2d3a:	99 1f       	adc	r25, r25
    2d3c:	0a 94       	dec	r0
    2d3e:	e2 f7       	brpl	.-8      	; 0x2d38 <Dio_vidPullUpEnalple+0x90>
    2d40:	84 2b       	or	r24, r20
    2d42:	8c 93       	st	X, r24
    2d44:	27 c0       	rjmp	.+78     	; 0x2d94 <Dio_vidPullUpEnalple+0xec>
			break;

		case DIO_PORTC:
			SET_BIT(DIO_PORTC_REG,pin);
    2d46:	a5 e3       	ldi	r26, 0x35	; 53
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	e5 e3       	ldi	r30, 0x35	; 53
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	48 2f       	mov	r20, r24
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	28 2f       	mov	r18, r24
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	02 2e       	mov	r0, r18
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <Dio_vidPullUpEnalple+0xbc>
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	0a 94       	dec	r0
    2d66:	e2 f7       	brpl	.-8      	; 0x2d60 <Dio_vidPullUpEnalple+0xb8>
    2d68:	84 2b       	or	r24, r20
    2d6a:	8c 93       	st	X, r24
    2d6c:	13 c0       	rjmp	.+38     	; 0x2d94 <Dio_vidPullUpEnalple+0xec>
			break;

		case DIO_PORTD:
			SET_BIT(DIO_PORTD_REG,pin);
    2d6e:	a2 e3       	ldi	r26, 0x32	; 50
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	e2 e3       	ldi	r30, 0x32	; 50
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	48 2f       	mov	r20, r24
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	02 2e       	mov	r0, r18
    2d86:	02 c0       	rjmp	.+4      	; 0x2d8c <Dio_vidPullUpEnalple+0xe4>
    2d88:	88 0f       	add	r24, r24
    2d8a:	99 1f       	adc	r25, r25
    2d8c:	0a 94       	dec	r0
    2d8e:	e2 f7       	brpl	.-8      	; 0x2d88 <Dio_vidPullUpEnalple+0xe0>
    2d90:	84 2b       	or	r24, r20
    2d92:	8c 93       	st	X, r24
			break;
		}
}
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	08 95       	ret

00002da2 <ADC_vidInit>:

#include "ADC.h"
#include "Bit_Math.h"

void ADC_vidInit(void)
{
    2da2:	df 93       	push	r29
    2da4:	cf 93       	push	r28
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
	// Enable adc
	SET_BIT(ADC_ADCSRA_REG , 7);
    2daa:	a6 e2       	ldi	r26, 0x26	; 38
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	e6 e2       	ldi	r30, 0x26	; 38
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	80 68       	ori	r24, 0x80	; 128
    2db6:	8c 93       	st	X, r24
	// select Verf+
	SET_BIT(ADC_ADMUX_REG , 6);
    2db8:	a7 e2       	ldi	r26, 0x27	; 39
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	e7 e2       	ldi	r30, 0x27	; 39
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	80 64       	ori	r24, 0x40	; 64
    2dc4:	8c 93       	st	X, r24
	CLEAR_BIT(ADC_ADMUX_REG , 7);
    2dc6:	a7 e2       	ldi	r26, 0x27	; 39
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e7 e2       	ldi	r30, 0x27	; 39
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	8f 77       	andi	r24, 0x7F	; 127
    2dd2:	8c 93       	st	X, r24
	//select prescaler factor /128
	SET_BIT(ADC_ADCSRA_REG , 0);
    2dd4:	a6 e2       	ldi	r26, 0x26	; 38
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	e6 e2       	ldi	r30, 0x26	; 38
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	81 60       	ori	r24, 0x01	; 1
    2de0:	8c 93       	st	X, r24
	SET_BIT(ADC_ADCSRA_REG , 1);
    2de2:	a6 e2       	ldi	r26, 0x26	; 38
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	e6 e2       	ldi	r30, 0x26	; 38
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	82 60       	ori	r24, 0x02	; 2
    2dee:	8c 93       	st	X, r24
	SET_BIT(ADC_ADCSRA_REG , 2);
    2df0:	a6 e2       	ldi	r26, 0x26	; 38
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	e6 e2       	ldi	r30, 0x26	; 38
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	84 60       	ori	r24, 0x04	; 4
    2dfc:	8c 93       	st	X, r24
		//or
		//ADC_ADCSRA_REG |= 7;

}
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <ADC_f64ADCRead>:


f64 ADC_f64ADCRead (ADC_channelID_t channel)
{
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	27 97       	sbiw	r28, 0x07	; 7
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	8f 83       	std	Y+7, r24	; 0x07
	u16 loc_ADCResult = 0;     //result to be returned
    2e1a:	1e 82       	std	Y+6, r1	; 0x06
    2e1c:	1d 82       	std	Y+5, r1	; 0x05
	f64 loc_volt = loc_ADCResult*ADC_step;
    2e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e20:	9e 81       	ldd	r25, Y+6	; 0x06
    2e22:	cc 01       	movw	r24, r24
    2e24:	a0 e0       	ldi	r26, 0x00	; 0
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	bc 01       	movw	r22, r24
    2e36:	cd 01       	movw	r24, r26
    2e38:	2a e9       	ldi	r18, 0x9A	; 154
    2e3a:	39 e9       	ldi	r19, 0x99	; 153
    2e3c:	49 e9       	ldi	r20, 0x99	; 153
    2e3e:	50 e4       	ldi	r21, 0x40	; 64
    2e40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	89 83       	std	Y+1, r24	; 0x01
    2e4a:	9a 83       	std	Y+2, r25	; 0x02
    2e4c:	ab 83       	std	Y+3, r26	; 0x03
    2e4e:	bc 83       	std	Y+4, r27	; 0x04
	//select channel ADC1
	ADC_ADMUX_REG =(ADC_ADMUX_REG & 0xF8) | channel;
    2e50:	a7 e2       	ldi	r26, 0x27	; 39
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	e7 e2       	ldi	r30, 0x27	; 39
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	98 2f       	mov	r25, r24
    2e5c:	98 7f       	andi	r25, 0xF8	; 248
    2e5e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e60:	89 2b       	or	r24, r25
    2e62:	8c 93       	st	X, r24


	//set start conversion
	SET_BIT(ADC_ADCSRA_REG , 6);
    2e64:	a6 e2       	ldi	r26, 0x26	; 38
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	e6 e2       	ldi	r30, 0x26	; 38
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	80 81       	ld	r24, Z
    2e6e:	80 64       	ori	r24, 0x40	; 64
    2e70:	8c 93       	st	X, r24

	//wait on ADIF flag to be raised
	while ( CHECK_BIT(ADC_ADCSRA_REG , 4) != 1 )
    2e72:	e6 e2       	ldi	r30, 0x26	; 38
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	82 95       	swap	r24
    2e7a:	8f 70       	andi	r24, 0x0F	; 15
    2e7c:	88 2f       	mov	r24, r24
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	81 70       	andi	r24, 0x01	; 1
    2e82:	90 70       	andi	r25, 0x00	; 0
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	a9 f3       	breq	.-22     	; 0x2e72 <ADC_f64ADCRead+0x6e>
	{
		// DO nothing
	}
	// to clear the flag ,you should write 1 on the bit (related to AVR) , but the hardware will write 0 on the bit
	SET_BIT(ADC_ADCSRA_REG , 4); //to clear the interrupt flag
    2e88:	a6 e2       	ldi	r26, 0x26	; 38
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	e6 e2       	ldi	r30, 0x26	; 38
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	80 61       	ori	r24, 0x10	; 16
    2e94:	8c 93       	st	X, r24

	//read ADCL and ADCH
	loc_ADCResult = (ADC_ADCL_REG)|(ADC_ADCH_REG << 8);
    2e96:	e4 e2       	ldi	r30, 0x24	; 36
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	e5 e2       	ldi	r30, 0x25	; 37
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	80 81       	ld	r24, Z
    2ea6:	88 2f       	mov	r24, r24
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	98 2f       	mov	r25, r24
    2eac:	88 27       	eor	r24, r24
    2eae:	82 2b       	or	r24, r18
    2eb0:	93 2b       	or	r25, r19
    2eb2:	9e 83       	std	Y+6, r25	; 0x06
    2eb4:	8d 83       	std	Y+5, r24	; 0x05

	loc_volt = loc_ADCResult *ADC_step;
    2eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eba:	cc 01       	movw	r24, r24
    2ebc:	a0 e0       	ldi	r26, 0x00	; 0
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	bc 01       	movw	r22, r24
    2ec2:	cd 01       	movw	r24, r26
    2ec4:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	bc 01       	movw	r22, r24
    2ece:	cd 01       	movw	r24, r26
    2ed0:	2a e9       	ldi	r18, 0x9A	; 154
    2ed2:	39 e9       	ldi	r19, 0x99	; 153
    2ed4:	49 e9       	ldi	r20, 0x99	; 153
    2ed6:	50 e4       	ldi	r21, 0x40	; 64
    2ed8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	89 83       	std	Y+1, r24	; 0x01
    2ee2:	9a 83       	std	Y+2, r25	; 0x02
    2ee4:	ab 83       	std	Y+3, r26	; 0x03
    2ee6:	bc 83       	std	Y+4, r27	; 0x04

	return loc_volt;
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	9a 81       	ldd	r25, Y+2	; 0x02
    2eec:	ab 81       	ldd	r26, Y+3	; 0x03
    2eee:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	cd 01       	movw	r24, r26
    2ef4:	27 96       	adiw	r28, 0x07	; 7
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	f8 94       	cli
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	cd bf       	out	0x3d, r28	; 61
    2f00:	cf 91       	pop	r28
    2f02:	df 91       	pop	r29
    2f04:	08 95       	ret

00002f06 <__udivmodqi4>:
    2f06:	99 1b       	sub	r25, r25
    2f08:	79 e0       	ldi	r23, 0x09	; 9
    2f0a:	04 c0       	rjmp	.+8      	; 0x2f14 <__udivmodqi4_ep>

00002f0c <__udivmodqi4_loop>:
    2f0c:	99 1f       	adc	r25, r25
    2f0e:	96 17       	cp	r25, r22
    2f10:	08 f0       	brcs	.+2      	; 0x2f14 <__udivmodqi4_ep>
    2f12:	96 1b       	sub	r25, r22

00002f14 <__udivmodqi4_ep>:
    2f14:	88 1f       	adc	r24, r24
    2f16:	7a 95       	dec	r23
    2f18:	c9 f7       	brne	.-14     	; 0x2f0c <__udivmodqi4_loop>
    2f1a:	80 95       	com	r24
    2f1c:	08 95       	ret

00002f1e <__udivmodsi4>:
    2f1e:	a1 e2       	ldi	r26, 0x21	; 33
    2f20:	1a 2e       	mov	r1, r26
    2f22:	aa 1b       	sub	r26, r26
    2f24:	bb 1b       	sub	r27, r27
    2f26:	fd 01       	movw	r30, r26
    2f28:	0d c0       	rjmp	.+26     	; 0x2f44 <__udivmodsi4_ep>

00002f2a <__udivmodsi4_loop>:
    2f2a:	aa 1f       	adc	r26, r26
    2f2c:	bb 1f       	adc	r27, r27
    2f2e:	ee 1f       	adc	r30, r30
    2f30:	ff 1f       	adc	r31, r31
    2f32:	a2 17       	cp	r26, r18
    2f34:	b3 07       	cpc	r27, r19
    2f36:	e4 07       	cpc	r30, r20
    2f38:	f5 07       	cpc	r31, r21
    2f3a:	20 f0       	brcs	.+8      	; 0x2f44 <__udivmodsi4_ep>
    2f3c:	a2 1b       	sub	r26, r18
    2f3e:	b3 0b       	sbc	r27, r19
    2f40:	e4 0b       	sbc	r30, r20
    2f42:	f5 0b       	sbc	r31, r21

00002f44 <__udivmodsi4_ep>:
    2f44:	66 1f       	adc	r22, r22
    2f46:	77 1f       	adc	r23, r23
    2f48:	88 1f       	adc	r24, r24
    2f4a:	99 1f       	adc	r25, r25
    2f4c:	1a 94       	dec	r1
    2f4e:	69 f7       	brne	.-38     	; 0x2f2a <__udivmodsi4_loop>
    2f50:	60 95       	com	r22
    2f52:	70 95       	com	r23
    2f54:	80 95       	com	r24
    2f56:	90 95       	com	r25
    2f58:	9b 01       	movw	r18, r22
    2f5a:	ac 01       	movw	r20, r24
    2f5c:	bd 01       	movw	r22, r26
    2f5e:	cf 01       	movw	r24, r30
    2f60:	08 95       	ret

00002f62 <__prologue_saves__>:
    2f62:	2f 92       	push	r2
    2f64:	3f 92       	push	r3
    2f66:	4f 92       	push	r4
    2f68:	5f 92       	push	r5
    2f6a:	6f 92       	push	r6
    2f6c:	7f 92       	push	r7
    2f6e:	8f 92       	push	r8
    2f70:	9f 92       	push	r9
    2f72:	af 92       	push	r10
    2f74:	bf 92       	push	r11
    2f76:	cf 92       	push	r12
    2f78:	df 92       	push	r13
    2f7a:	ef 92       	push	r14
    2f7c:	ff 92       	push	r15
    2f7e:	0f 93       	push	r16
    2f80:	1f 93       	push	r17
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    2f8a:	ca 1b       	sub	r28, r26
    2f8c:	db 0b       	sbc	r29, r27
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
    2f98:	09 94       	ijmp

00002f9a <__epilogue_restores__>:
    2f9a:	2a 88       	ldd	r2, Y+18	; 0x12
    2f9c:	39 88       	ldd	r3, Y+17	; 0x11
    2f9e:	48 88       	ldd	r4, Y+16	; 0x10
    2fa0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fa2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fa4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fa6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fa8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2faa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fac:	b9 84       	ldd	r11, Y+9	; 0x09
    2fae:	c8 84       	ldd	r12, Y+8	; 0x08
    2fb0:	df 80       	ldd	r13, Y+7	; 0x07
    2fb2:	ee 80       	ldd	r14, Y+6	; 0x06
    2fb4:	fd 80       	ldd	r15, Y+5	; 0x05
    2fb6:	0c 81       	ldd	r16, Y+4	; 0x04
    2fb8:	1b 81       	ldd	r17, Y+3	; 0x03
    2fba:	aa 81       	ldd	r26, Y+2	; 0x02
    2fbc:	b9 81       	ldd	r27, Y+1	; 0x01
    2fbe:	ce 0f       	add	r28, r30
    2fc0:	d1 1d       	adc	r29, r1
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	ed 01       	movw	r28, r26
    2fce:	08 95       	ret

00002fd0 <sprintf>:
    2fd0:	ae e0       	ldi	r26, 0x0E	; 14
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	ee ee       	ldi	r30, 0xEE	; 238
    2fd6:	f7 e1       	ldi	r31, 0x17	; 23
    2fd8:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__prologue_saves__+0x1c>
    2fdc:	0d 89       	ldd	r16, Y+21	; 0x15
    2fde:	1e 89       	ldd	r17, Y+22	; 0x16
    2fe0:	86 e0       	ldi	r24, 0x06	; 6
    2fe2:	8c 83       	std	Y+4, r24	; 0x04
    2fe4:	1a 83       	std	Y+2, r17	; 0x02
    2fe6:	09 83       	std	Y+1, r16	; 0x01
    2fe8:	8f ef       	ldi	r24, 0xFF	; 255
    2fea:	9f e7       	ldi	r25, 0x7F	; 127
    2fec:	9e 83       	std	Y+6, r25	; 0x06
    2fee:	8d 83       	std	Y+5, r24	; 0x05
    2ff0:	9e 01       	movw	r18, r28
    2ff2:	27 5e       	subi	r18, 0xE7	; 231
    2ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff6:	ce 01       	movw	r24, r28
    2ff8:	01 96       	adiw	r24, 0x01	; 1
    2ffa:	6f 89       	ldd	r22, Y+23	; 0x17
    2ffc:	78 8d       	ldd	r23, Y+24	; 0x18
    2ffe:	a9 01       	movw	r20, r18
    3000:	0e 94 0c 18 	call	0x3018	; 0x3018 <vfprintf>
    3004:	2f 81       	ldd	r18, Y+7	; 0x07
    3006:	38 85       	ldd	r19, Y+8	; 0x08
    3008:	02 0f       	add	r16, r18
    300a:	13 1f       	adc	r17, r19
    300c:	f8 01       	movw	r30, r16
    300e:	10 82       	st	Z, r1
    3010:	2e 96       	adiw	r28, 0x0e	; 14
    3012:	e4 e0       	ldi	r30, 0x04	; 4
    3014:	0c 94 db 17 	jmp	0x2fb6	; 0x2fb6 <__epilogue_restores__+0x1c>

00003018 <vfprintf>:
    3018:	ab e0       	ldi	r26, 0x0B	; 11
    301a:	b0 e0       	ldi	r27, 0x00	; 0
    301c:	e2 e1       	ldi	r30, 0x12	; 18
    301e:	f8 e1       	ldi	r31, 0x18	; 24
    3020:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__prologue_saves__>
    3024:	3c 01       	movw	r6, r24
    3026:	2b 01       	movw	r4, r22
    3028:	5a 01       	movw	r10, r20
    302a:	fc 01       	movw	r30, r24
    302c:	17 82       	std	Z+7, r1	; 0x07
    302e:	16 82       	std	Z+6, r1	; 0x06
    3030:	83 81       	ldd	r24, Z+3	; 0x03
    3032:	81 fd       	sbrc	r24, 1
    3034:	03 c0       	rjmp	.+6      	; 0x303c <vfprintf+0x24>
    3036:	6f ef       	ldi	r22, 0xFF	; 255
    3038:	7f ef       	ldi	r23, 0xFF	; 255
    303a:	c6 c1       	rjmp	.+908    	; 0x33c8 <vfprintf+0x3b0>
    303c:	9a e0       	ldi	r25, 0x0A	; 10
    303e:	89 2e       	mov	r8, r25
    3040:	1e 01       	movw	r2, r28
    3042:	08 94       	sec
    3044:	21 1c       	adc	r2, r1
    3046:	31 1c       	adc	r3, r1
    3048:	f3 01       	movw	r30, r6
    304a:	23 81       	ldd	r18, Z+3	; 0x03
    304c:	f2 01       	movw	r30, r4
    304e:	23 fd       	sbrc	r18, 3
    3050:	85 91       	lpm	r24, Z+
    3052:	23 ff       	sbrs	r18, 3
    3054:	81 91       	ld	r24, Z+
    3056:	2f 01       	movw	r4, r30
    3058:	88 23       	and	r24, r24
    305a:	09 f4       	brne	.+2      	; 0x305e <vfprintf+0x46>
    305c:	b2 c1       	rjmp	.+868    	; 0x33c2 <vfprintf+0x3aa>
    305e:	85 32       	cpi	r24, 0x25	; 37
    3060:	39 f4       	brne	.+14     	; 0x3070 <vfprintf+0x58>
    3062:	23 fd       	sbrc	r18, 3
    3064:	85 91       	lpm	r24, Z+
    3066:	23 ff       	sbrs	r18, 3
    3068:	81 91       	ld	r24, Z+
    306a:	2f 01       	movw	r4, r30
    306c:	85 32       	cpi	r24, 0x25	; 37
    306e:	29 f4       	brne	.+10     	; 0x307a <vfprintf+0x62>
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	b3 01       	movw	r22, r6
    3074:	0e 94 ff 19 	call	0x33fe	; 0x33fe <fputc>
    3078:	e7 cf       	rjmp	.-50     	; 0x3048 <vfprintf+0x30>
    307a:	98 2f       	mov	r25, r24
    307c:	ff 24       	eor	r15, r15
    307e:	ee 24       	eor	r14, r14
    3080:	99 24       	eor	r9, r9
    3082:	ff e1       	ldi	r31, 0x1F	; 31
    3084:	ff 15       	cp	r31, r15
    3086:	d0 f0       	brcs	.+52     	; 0x30bc <vfprintf+0xa4>
    3088:	9b 32       	cpi	r25, 0x2B	; 43
    308a:	69 f0       	breq	.+26     	; 0x30a6 <vfprintf+0x8e>
    308c:	9c 32       	cpi	r25, 0x2C	; 44
    308e:	28 f4       	brcc	.+10     	; 0x309a <vfprintf+0x82>
    3090:	90 32       	cpi	r25, 0x20	; 32
    3092:	59 f0       	breq	.+22     	; 0x30aa <vfprintf+0x92>
    3094:	93 32       	cpi	r25, 0x23	; 35
    3096:	91 f4       	brne	.+36     	; 0x30bc <vfprintf+0xa4>
    3098:	0e c0       	rjmp	.+28     	; 0x30b6 <vfprintf+0x9e>
    309a:	9d 32       	cpi	r25, 0x2D	; 45
    309c:	49 f0       	breq	.+18     	; 0x30b0 <vfprintf+0x98>
    309e:	90 33       	cpi	r25, 0x30	; 48
    30a0:	69 f4       	brne	.+26     	; 0x30bc <vfprintf+0xa4>
    30a2:	41 e0       	ldi	r20, 0x01	; 1
    30a4:	24 c0       	rjmp	.+72     	; 0x30ee <vfprintf+0xd6>
    30a6:	52 e0       	ldi	r21, 0x02	; 2
    30a8:	f5 2a       	or	r15, r21
    30aa:	84 e0       	ldi	r24, 0x04	; 4
    30ac:	f8 2a       	or	r15, r24
    30ae:	28 c0       	rjmp	.+80     	; 0x3100 <vfprintf+0xe8>
    30b0:	98 e0       	ldi	r25, 0x08	; 8
    30b2:	f9 2a       	or	r15, r25
    30b4:	25 c0       	rjmp	.+74     	; 0x3100 <vfprintf+0xe8>
    30b6:	e0 e1       	ldi	r30, 0x10	; 16
    30b8:	fe 2a       	or	r15, r30
    30ba:	22 c0       	rjmp	.+68     	; 0x3100 <vfprintf+0xe8>
    30bc:	f7 fc       	sbrc	r15, 7
    30be:	29 c0       	rjmp	.+82     	; 0x3112 <vfprintf+0xfa>
    30c0:	89 2f       	mov	r24, r25
    30c2:	80 53       	subi	r24, 0x30	; 48
    30c4:	8a 30       	cpi	r24, 0x0A	; 10
    30c6:	70 f4       	brcc	.+28     	; 0x30e4 <vfprintf+0xcc>
    30c8:	f6 fe       	sbrs	r15, 6
    30ca:	05 c0       	rjmp	.+10     	; 0x30d6 <vfprintf+0xbe>
    30cc:	98 9c       	mul	r9, r8
    30ce:	90 2c       	mov	r9, r0
    30d0:	11 24       	eor	r1, r1
    30d2:	98 0e       	add	r9, r24
    30d4:	15 c0       	rjmp	.+42     	; 0x3100 <vfprintf+0xe8>
    30d6:	e8 9c       	mul	r14, r8
    30d8:	e0 2c       	mov	r14, r0
    30da:	11 24       	eor	r1, r1
    30dc:	e8 0e       	add	r14, r24
    30de:	f0 e2       	ldi	r31, 0x20	; 32
    30e0:	ff 2a       	or	r15, r31
    30e2:	0e c0       	rjmp	.+28     	; 0x3100 <vfprintf+0xe8>
    30e4:	9e 32       	cpi	r25, 0x2E	; 46
    30e6:	29 f4       	brne	.+10     	; 0x30f2 <vfprintf+0xda>
    30e8:	f6 fc       	sbrc	r15, 6
    30ea:	6b c1       	rjmp	.+726    	; 0x33c2 <vfprintf+0x3aa>
    30ec:	40 e4       	ldi	r20, 0x40	; 64
    30ee:	f4 2a       	or	r15, r20
    30f0:	07 c0       	rjmp	.+14     	; 0x3100 <vfprintf+0xe8>
    30f2:	9c 36       	cpi	r25, 0x6C	; 108
    30f4:	19 f4       	brne	.+6      	; 0x30fc <vfprintf+0xe4>
    30f6:	50 e8       	ldi	r21, 0x80	; 128
    30f8:	f5 2a       	or	r15, r21
    30fa:	02 c0       	rjmp	.+4      	; 0x3100 <vfprintf+0xe8>
    30fc:	98 36       	cpi	r25, 0x68	; 104
    30fe:	49 f4       	brne	.+18     	; 0x3112 <vfprintf+0xfa>
    3100:	f2 01       	movw	r30, r4
    3102:	23 fd       	sbrc	r18, 3
    3104:	95 91       	lpm	r25, Z+
    3106:	23 ff       	sbrs	r18, 3
    3108:	91 91       	ld	r25, Z+
    310a:	2f 01       	movw	r4, r30
    310c:	99 23       	and	r25, r25
    310e:	09 f0       	breq	.+2      	; 0x3112 <vfprintf+0xfa>
    3110:	b8 cf       	rjmp	.-144    	; 0x3082 <vfprintf+0x6a>
    3112:	89 2f       	mov	r24, r25
    3114:	85 54       	subi	r24, 0x45	; 69
    3116:	83 30       	cpi	r24, 0x03	; 3
    3118:	18 f0       	brcs	.+6      	; 0x3120 <vfprintf+0x108>
    311a:	80 52       	subi	r24, 0x20	; 32
    311c:	83 30       	cpi	r24, 0x03	; 3
    311e:	38 f4       	brcc	.+14     	; 0x312e <vfprintf+0x116>
    3120:	44 e0       	ldi	r20, 0x04	; 4
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	a4 0e       	add	r10, r20
    3126:	b5 1e       	adc	r11, r21
    3128:	5f e3       	ldi	r21, 0x3F	; 63
    312a:	59 83       	std	Y+1, r21	; 0x01
    312c:	0f c0       	rjmp	.+30     	; 0x314c <vfprintf+0x134>
    312e:	93 36       	cpi	r25, 0x63	; 99
    3130:	31 f0       	breq	.+12     	; 0x313e <vfprintf+0x126>
    3132:	93 37       	cpi	r25, 0x73	; 115
    3134:	79 f0       	breq	.+30     	; 0x3154 <vfprintf+0x13c>
    3136:	93 35       	cpi	r25, 0x53	; 83
    3138:	09 f0       	breq	.+2      	; 0x313c <vfprintf+0x124>
    313a:	56 c0       	rjmp	.+172    	; 0x31e8 <vfprintf+0x1d0>
    313c:	20 c0       	rjmp	.+64     	; 0x317e <vfprintf+0x166>
    313e:	f5 01       	movw	r30, r10
    3140:	80 81       	ld	r24, Z
    3142:	89 83       	std	Y+1, r24	; 0x01
    3144:	42 e0       	ldi	r20, 0x02	; 2
    3146:	50 e0       	ldi	r21, 0x00	; 0
    3148:	a4 0e       	add	r10, r20
    314a:	b5 1e       	adc	r11, r21
    314c:	61 01       	movw	r12, r2
    314e:	01 e0       	ldi	r16, 0x01	; 1
    3150:	10 e0       	ldi	r17, 0x00	; 0
    3152:	12 c0       	rjmp	.+36     	; 0x3178 <vfprintf+0x160>
    3154:	f5 01       	movw	r30, r10
    3156:	c0 80       	ld	r12, Z
    3158:	d1 80       	ldd	r13, Z+1	; 0x01
    315a:	f6 fc       	sbrc	r15, 6
    315c:	03 c0       	rjmp	.+6      	; 0x3164 <vfprintf+0x14c>
    315e:	6f ef       	ldi	r22, 0xFF	; 255
    3160:	7f ef       	ldi	r23, 0xFF	; 255
    3162:	02 c0       	rjmp	.+4      	; 0x3168 <vfprintf+0x150>
    3164:	69 2d       	mov	r22, r9
    3166:	70 e0       	ldi	r23, 0x00	; 0
    3168:	42 e0       	ldi	r20, 0x02	; 2
    316a:	50 e0       	ldi	r21, 0x00	; 0
    316c:	a4 0e       	add	r10, r20
    316e:	b5 1e       	adc	r11, r21
    3170:	c6 01       	movw	r24, r12
    3172:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <strnlen>
    3176:	8c 01       	movw	r16, r24
    3178:	5f e7       	ldi	r21, 0x7F	; 127
    317a:	f5 22       	and	r15, r21
    317c:	14 c0       	rjmp	.+40     	; 0x31a6 <vfprintf+0x18e>
    317e:	f5 01       	movw	r30, r10
    3180:	c0 80       	ld	r12, Z
    3182:	d1 80       	ldd	r13, Z+1	; 0x01
    3184:	f6 fc       	sbrc	r15, 6
    3186:	03 c0       	rjmp	.+6      	; 0x318e <vfprintf+0x176>
    3188:	6f ef       	ldi	r22, 0xFF	; 255
    318a:	7f ef       	ldi	r23, 0xFF	; 255
    318c:	02 c0       	rjmp	.+4      	; 0x3192 <vfprintf+0x17a>
    318e:	69 2d       	mov	r22, r9
    3190:	70 e0       	ldi	r23, 0x00	; 0
    3192:	42 e0       	ldi	r20, 0x02	; 2
    3194:	50 e0       	ldi	r21, 0x00	; 0
    3196:	a4 0e       	add	r10, r20
    3198:	b5 1e       	adc	r11, r21
    319a:	c6 01       	movw	r24, r12
    319c:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <strnlen_P>
    31a0:	8c 01       	movw	r16, r24
    31a2:	50 e8       	ldi	r21, 0x80	; 128
    31a4:	f5 2a       	or	r15, r21
    31a6:	f3 fe       	sbrs	r15, 3
    31a8:	07 c0       	rjmp	.+14     	; 0x31b8 <vfprintf+0x1a0>
    31aa:	1a c0       	rjmp	.+52     	; 0x31e0 <vfprintf+0x1c8>
    31ac:	80 e2       	ldi	r24, 0x20	; 32
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	b3 01       	movw	r22, r6
    31b2:	0e 94 ff 19 	call	0x33fe	; 0x33fe <fputc>
    31b6:	ea 94       	dec	r14
    31b8:	8e 2d       	mov	r24, r14
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	08 17       	cp	r16, r24
    31be:	19 07       	cpc	r17, r25
    31c0:	a8 f3       	brcs	.-22     	; 0x31ac <vfprintf+0x194>
    31c2:	0e c0       	rjmp	.+28     	; 0x31e0 <vfprintf+0x1c8>
    31c4:	f6 01       	movw	r30, r12
    31c6:	f7 fc       	sbrc	r15, 7
    31c8:	85 91       	lpm	r24, Z+
    31ca:	f7 fe       	sbrs	r15, 7
    31cc:	81 91       	ld	r24, Z+
    31ce:	6f 01       	movw	r12, r30
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	b3 01       	movw	r22, r6
    31d4:	0e 94 ff 19 	call	0x33fe	; 0x33fe <fputc>
    31d8:	e1 10       	cpse	r14, r1
    31da:	ea 94       	dec	r14
    31dc:	01 50       	subi	r16, 0x01	; 1
    31de:	10 40       	sbci	r17, 0x00	; 0
    31e0:	01 15       	cp	r16, r1
    31e2:	11 05       	cpc	r17, r1
    31e4:	79 f7       	brne	.-34     	; 0x31c4 <vfprintf+0x1ac>
    31e6:	ea c0       	rjmp	.+468    	; 0x33bc <vfprintf+0x3a4>
    31e8:	94 36       	cpi	r25, 0x64	; 100
    31ea:	11 f0       	breq	.+4      	; 0x31f0 <vfprintf+0x1d8>
    31ec:	99 36       	cpi	r25, 0x69	; 105
    31ee:	69 f5       	brne	.+90     	; 0x324a <vfprintf+0x232>
    31f0:	f7 fe       	sbrs	r15, 7
    31f2:	08 c0       	rjmp	.+16     	; 0x3204 <vfprintf+0x1ec>
    31f4:	f5 01       	movw	r30, r10
    31f6:	20 81       	ld	r18, Z
    31f8:	31 81       	ldd	r19, Z+1	; 0x01
    31fa:	42 81       	ldd	r20, Z+2	; 0x02
    31fc:	53 81       	ldd	r21, Z+3	; 0x03
    31fe:	84 e0       	ldi	r24, 0x04	; 4
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	0a c0       	rjmp	.+20     	; 0x3218 <vfprintf+0x200>
    3204:	f5 01       	movw	r30, r10
    3206:	80 81       	ld	r24, Z
    3208:	91 81       	ldd	r25, Z+1	; 0x01
    320a:	9c 01       	movw	r18, r24
    320c:	44 27       	eor	r20, r20
    320e:	37 fd       	sbrc	r19, 7
    3210:	40 95       	com	r20
    3212:	54 2f       	mov	r21, r20
    3214:	82 e0       	ldi	r24, 0x02	; 2
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	a8 0e       	add	r10, r24
    321a:	b9 1e       	adc	r11, r25
    321c:	9f e6       	ldi	r25, 0x6F	; 111
    321e:	f9 22       	and	r15, r25
    3220:	57 ff       	sbrs	r21, 7
    3222:	09 c0       	rjmp	.+18     	; 0x3236 <vfprintf+0x21e>
    3224:	50 95       	com	r21
    3226:	40 95       	com	r20
    3228:	30 95       	com	r19
    322a:	21 95       	neg	r18
    322c:	3f 4f       	sbci	r19, 0xFF	; 255
    322e:	4f 4f       	sbci	r20, 0xFF	; 255
    3230:	5f 4f       	sbci	r21, 0xFF	; 255
    3232:	e0 e8       	ldi	r30, 0x80	; 128
    3234:	fe 2a       	or	r15, r30
    3236:	ca 01       	movw	r24, r20
    3238:	b9 01       	movw	r22, r18
    323a:	a1 01       	movw	r20, r2
    323c:	2a e0       	ldi	r18, 0x0A	; 10
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__ultoa_invert>
    3244:	d8 2e       	mov	r13, r24
    3246:	d2 18       	sub	r13, r2
    3248:	40 c0       	rjmp	.+128    	; 0x32ca <vfprintf+0x2b2>
    324a:	95 37       	cpi	r25, 0x75	; 117
    324c:	29 f4       	brne	.+10     	; 0x3258 <vfprintf+0x240>
    324e:	1f 2d       	mov	r17, r15
    3250:	1f 7e       	andi	r17, 0xEF	; 239
    3252:	2a e0       	ldi	r18, 0x0A	; 10
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	1d c0       	rjmp	.+58     	; 0x3292 <vfprintf+0x27a>
    3258:	1f 2d       	mov	r17, r15
    325a:	19 7f       	andi	r17, 0xF9	; 249
    325c:	9f 36       	cpi	r25, 0x6F	; 111
    325e:	61 f0       	breq	.+24     	; 0x3278 <vfprintf+0x260>
    3260:	90 37       	cpi	r25, 0x70	; 112
    3262:	20 f4       	brcc	.+8      	; 0x326c <vfprintf+0x254>
    3264:	98 35       	cpi	r25, 0x58	; 88
    3266:	09 f0       	breq	.+2      	; 0x326a <vfprintf+0x252>
    3268:	ac c0       	rjmp	.+344    	; 0x33c2 <vfprintf+0x3aa>
    326a:	0f c0       	rjmp	.+30     	; 0x328a <vfprintf+0x272>
    326c:	90 37       	cpi	r25, 0x70	; 112
    326e:	39 f0       	breq	.+14     	; 0x327e <vfprintf+0x266>
    3270:	98 37       	cpi	r25, 0x78	; 120
    3272:	09 f0       	breq	.+2      	; 0x3276 <vfprintf+0x25e>
    3274:	a6 c0       	rjmp	.+332    	; 0x33c2 <vfprintf+0x3aa>
    3276:	04 c0       	rjmp	.+8      	; 0x3280 <vfprintf+0x268>
    3278:	28 e0       	ldi	r18, 0x08	; 8
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	0a c0       	rjmp	.+20     	; 0x3292 <vfprintf+0x27a>
    327e:	10 61       	ori	r17, 0x10	; 16
    3280:	14 fd       	sbrc	r17, 4
    3282:	14 60       	ori	r17, 0x04	; 4
    3284:	20 e1       	ldi	r18, 0x10	; 16
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	04 c0       	rjmp	.+8      	; 0x3292 <vfprintf+0x27a>
    328a:	14 fd       	sbrc	r17, 4
    328c:	16 60       	ori	r17, 0x06	; 6
    328e:	20 e1       	ldi	r18, 0x10	; 16
    3290:	32 e0       	ldi	r19, 0x02	; 2
    3292:	17 ff       	sbrs	r17, 7
    3294:	08 c0       	rjmp	.+16     	; 0x32a6 <vfprintf+0x28e>
    3296:	f5 01       	movw	r30, r10
    3298:	60 81       	ld	r22, Z
    329a:	71 81       	ldd	r23, Z+1	; 0x01
    329c:	82 81       	ldd	r24, Z+2	; 0x02
    329e:	93 81       	ldd	r25, Z+3	; 0x03
    32a0:	44 e0       	ldi	r20, 0x04	; 4
    32a2:	50 e0       	ldi	r21, 0x00	; 0
    32a4:	08 c0       	rjmp	.+16     	; 0x32b6 <vfprintf+0x29e>
    32a6:	f5 01       	movw	r30, r10
    32a8:	80 81       	ld	r24, Z
    32aa:	91 81       	ldd	r25, Z+1	; 0x01
    32ac:	bc 01       	movw	r22, r24
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	42 e0       	ldi	r20, 0x02	; 2
    32b4:	50 e0       	ldi	r21, 0x00	; 0
    32b6:	a4 0e       	add	r10, r20
    32b8:	b5 1e       	adc	r11, r21
    32ba:	a1 01       	movw	r20, r2
    32bc:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__ultoa_invert>
    32c0:	d8 2e       	mov	r13, r24
    32c2:	d2 18       	sub	r13, r2
    32c4:	8f e7       	ldi	r24, 0x7F	; 127
    32c6:	f8 2e       	mov	r15, r24
    32c8:	f1 22       	and	r15, r17
    32ca:	f6 fe       	sbrs	r15, 6
    32cc:	0b c0       	rjmp	.+22     	; 0x32e4 <vfprintf+0x2cc>
    32ce:	5e ef       	ldi	r21, 0xFE	; 254
    32d0:	f5 22       	and	r15, r21
    32d2:	d9 14       	cp	r13, r9
    32d4:	38 f4       	brcc	.+14     	; 0x32e4 <vfprintf+0x2cc>
    32d6:	f4 fe       	sbrs	r15, 4
    32d8:	07 c0       	rjmp	.+14     	; 0x32e8 <vfprintf+0x2d0>
    32da:	f2 fc       	sbrc	r15, 2
    32dc:	05 c0       	rjmp	.+10     	; 0x32e8 <vfprintf+0x2d0>
    32de:	8f ee       	ldi	r24, 0xEF	; 239
    32e0:	f8 22       	and	r15, r24
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <vfprintf+0x2d0>
    32e4:	1d 2d       	mov	r17, r13
    32e6:	01 c0       	rjmp	.+2      	; 0x32ea <vfprintf+0x2d2>
    32e8:	19 2d       	mov	r17, r9
    32ea:	f4 fe       	sbrs	r15, 4
    32ec:	0d c0       	rjmp	.+26     	; 0x3308 <vfprintf+0x2f0>
    32ee:	fe 01       	movw	r30, r28
    32f0:	ed 0d       	add	r30, r13
    32f2:	f1 1d       	adc	r31, r1
    32f4:	80 81       	ld	r24, Z
    32f6:	80 33       	cpi	r24, 0x30	; 48
    32f8:	19 f4       	brne	.+6      	; 0x3300 <vfprintf+0x2e8>
    32fa:	99 ee       	ldi	r25, 0xE9	; 233
    32fc:	f9 22       	and	r15, r25
    32fe:	08 c0       	rjmp	.+16     	; 0x3310 <vfprintf+0x2f8>
    3300:	1f 5f       	subi	r17, 0xFF	; 255
    3302:	f2 fe       	sbrs	r15, 2
    3304:	05 c0       	rjmp	.+10     	; 0x3310 <vfprintf+0x2f8>
    3306:	03 c0       	rjmp	.+6      	; 0x330e <vfprintf+0x2f6>
    3308:	8f 2d       	mov	r24, r15
    330a:	86 78       	andi	r24, 0x86	; 134
    330c:	09 f0       	breq	.+2      	; 0x3310 <vfprintf+0x2f8>
    330e:	1f 5f       	subi	r17, 0xFF	; 255
    3310:	0f 2d       	mov	r16, r15
    3312:	f3 fc       	sbrc	r15, 3
    3314:	14 c0       	rjmp	.+40     	; 0x333e <vfprintf+0x326>
    3316:	f0 fe       	sbrs	r15, 0
    3318:	0f c0       	rjmp	.+30     	; 0x3338 <vfprintf+0x320>
    331a:	1e 15       	cp	r17, r14
    331c:	10 f0       	brcs	.+4      	; 0x3322 <vfprintf+0x30a>
    331e:	9d 2c       	mov	r9, r13
    3320:	0b c0       	rjmp	.+22     	; 0x3338 <vfprintf+0x320>
    3322:	9d 2c       	mov	r9, r13
    3324:	9e 0c       	add	r9, r14
    3326:	91 1a       	sub	r9, r17
    3328:	1e 2d       	mov	r17, r14
    332a:	06 c0       	rjmp	.+12     	; 0x3338 <vfprintf+0x320>
    332c:	80 e2       	ldi	r24, 0x20	; 32
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	b3 01       	movw	r22, r6
    3332:	0e 94 ff 19 	call	0x33fe	; 0x33fe <fputc>
    3336:	1f 5f       	subi	r17, 0xFF	; 255
    3338:	1e 15       	cp	r17, r14
    333a:	c0 f3       	brcs	.-16     	; 0x332c <vfprintf+0x314>
    333c:	04 c0       	rjmp	.+8      	; 0x3346 <vfprintf+0x32e>
    333e:	1e 15       	cp	r17, r14
    3340:	10 f4       	brcc	.+4      	; 0x3346 <vfprintf+0x32e>
    3342:	e1 1a       	sub	r14, r17
    3344:	01 c0       	rjmp	.+2      	; 0x3348 <vfprintf+0x330>
    3346:	ee 24       	eor	r14, r14
    3348:	04 ff       	sbrs	r16, 4
    334a:	0f c0       	rjmp	.+30     	; 0x336a <vfprintf+0x352>
    334c:	80 e3       	ldi	r24, 0x30	; 48
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	b3 01       	movw	r22, r6
    3352:	0e 94 ff 19 	call	0x33fe	; 0x33fe <fputc>
    3356:	02 ff       	sbrs	r16, 2
    3358:	1d c0       	rjmp	.+58     	; 0x3394 <vfprintf+0x37c>
    335a:	01 fd       	sbrc	r16, 1
    335c:	03 c0       	rjmp	.+6      	; 0x3364 <vfprintf+0x34c>
    335e:	88 e7       	ldi	r24, 0x78	; 120
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	0e c0       	rjmp	.+28     	; 0x3380 <vfprintf+0x368>
    3364:	88 e5       	ldi	r24, 0x58	; 88
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	0b c0       	rjmp	.+22     	; 0x3380 <vfprintf+0x368>
    336a:	80 2f       	mov	r24, r16
    336c:	86 78       	andi	r24, 0x86	; 134
    336e:	91 f0       	breq	.+36     	; 0x3394 <vfprintf+0x37c>
    3370:	01 ff       	sbrs	r16, 1
    3372:	02 c0       	rjmp	.+4      	; 0x3378 <vfprintf+0x360>
    3374:	8b e2       	ldi	r24, 0x2B	; 43
    3376:	01 c0       	rjmp	.+2      	; 0x337a <vfprintf+0x362>
    3378:	80 e2       	ldi	r24, 0x20	; 32
    337a:	f7 fc       	sbrc	r15, 7
    337c:	8d e2       	ldi	r24, 0x2D	; 45
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	b3 01       	movw	r22, r6
    3382:	0e 94 ff 19 	call	0x33fe	; 0x33fe <fputc>
    3386:	06 c0       	rjmp	.+12     	; 0x3394 <vfprintf+0x37c>
    3388:	80 e3       	ldi	r24, 0x30	; 48
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	b3 01       	movw	r22, r6
    338e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <fputc>
    3392:	9a 94       	dec	r9
    3394:	d9 14       	cp	r13, r9
    3396:	c0 f3       	brcs	.-16     	; 0x3388 <vfprintf+0x370>
    3398:	da 94       	dec	r13
    339a:	f1 01       	movw	r30, r2
    339c:	ed 0d       	add	r30, r13
    339e:	f1 1d       	adc	r31, r1
    33a0:	80 81       	ld	r24, Z
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	b3 01       	movw	r22, r6
    33a6:	0e 94 ff 19 	call	0x33fe	; 0x33fe <fputc>
    33aa:	dd 20       	and	r13, r13
    33ac:	a9 f7       	brne	.-22     	; 0x3398 <vfprintf+0x380>
    33ae:	06 c0       	rjmp	.+12     	; 0x33bc <vfprintf+0x3a4>
    33b0:	80 e2       	ldi	r24, 0x20	; 32
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	b3 01       	movw	r22, r6
    33b6:	0e 94 ff 19 	call	0x33fe	; 0x33fe <fputc>
    33ba:	ea 94       	dec	r14
    33bc:	ee 20       	and	r14, r14
    33be:	c1 f7       	brne	.-16     	; 0x33b0 <vfprintf+0x398>
    33c0:	43 ce       	rjmp	.-890    	; 0x3048 <vfprintf+0x30>
    33c2:	f3 01       	movw	r30, r6
    33c4:	66 81       	ldd	r22, Z+6	; 0x06
    33c6:	77 81       	ldd	r23, Z+7	; 0x07
    33c8:	cb 01       	movw	r24, r22
    33ca:	2b 96       	adiw	r28, 0x0b	; 11
    33cc:	e2 e1       	ldi	r30, 0x12	; 18
    33ce:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__epilogue_restores__>

000033d2 <strnlen_P>:
    33d2:	fc 01       	movw	r30, r24
    33d4:	05 90       	lpm	r0, Z+
    33d6:	61 50       	subi	r22, 0x01	; 1
    33d8:	70 40       	sbci	r23, 0x00	; 0
    33da:	01 10       	cpse	r0, r1
    33dc:	d8 f7       	brcc	.-10     	; 0x33d4 <strnlen_P+0x2>
    33de:	80 95       	com	r24
    33e0:	90 95       	com	r25
    33e2:	8e 0f       	add	r24, r30
    33e4:	9f 1f       	adc	r25, r31
    33e6:	08 95       	ret

000033e8 <strnlen>:
    33e8:	fc 01       	movw	r30, r24
    33ea:	61 50       	subi	r22, 0x01	; 1
    33ec:	70 40       	sbci	r23, 0x00	; 0
    33ee:	01 90       	ld	r0, Z+
    33f0:	01 10       	cpse	r0, r1
    33f2:	d8 f7       	brcc	.-10     	; 0x33ea <strnlen+0x2>
    33f4:	80 95       	com	r24
    33f6:	90 95       	com	r25
    33f8:	8e 0f       	add	r24, r30
    33fa:	9f 1f       	adc	r25, r31
    33fc:	08 95       	ret

000033fe <fputc>:
    33fe:	0f 93       	push	r16
    3400:	1f 93       	push	r17
    3402:	cf 93       	push	r28
    3404:	df 93       	push	r29
    3406:	8c 01       	movw	r16, r24
    3408:	eb 01       	movw	r28, r22
    340a:	8b 81       	ldd	r24, Y+3	; 0x03
    340c:	81 ff       	sbrs	r24, 1
    340e:	1b c0       	rjmp	.+54     	; 0x3446 <fputc+0x48>
    3410:	82 ff       	sbrs	r24, 2
    3412:	0d c0       	rjmp	.+26     	; 0x342e <fputc+0x30>
    3414:	2e 81       	ldd	r18, Y+6	; 0x06
    3416:	3f 81       	ldd	r19, Y+7	; 0x07
    3418:	8c 81       	ldd	r24, Y+4	; 0x04
    341a:	9d 81       	ldd	r25, Y+5	; 0x05
    341c:	28 17       	cp	r18, r24
    341e:	39 07       	cpc	r19, r25
    3420:	64 f4       	brge	.+24     	; 0x343a <fputc+0x3c>
    3422:	e8 81       	ld	r30, Y
    3424:	f9 81       	ldd	r31, Y+1	; 0x01
    3426:	01 93       	st	Z+, r16
    3428:	f9 83       	std	Y+1, r31	; 0x01
    342a:	e8 83       	st	Y, r30
    342c:	06 c0       	rjmp	.+12     	; 0x343a <fputc+0x3c>
    342e:	e8 85       	ldd	r30, Y+8	; 0x08
    3430:	f9 85       	ldd	r31, Y+9	; 0x09
    3432:	80 2f       	mov	r24, r16
    3434:	09 95       	icall
    3436:	89 2b       	or	r24, r25
    3438:	31 f4       	brne	.+12     	; 0x3446 <fputc+0x48>
    343a:	8e 81       	ldd	r24, Y+6	; 0x06
    343c:	9f 81       	ldd	r25, Y+7	; 0x07
    343e:	01 96       	adiw	r24, 0x01	; 1
    3440:	9f 83       	std	Y+7, r25	; 0x07
    3442:	8e 83       	std	Y+6, r24	; 0x06
    3444:	02 c0       	rjmp	.+4      	; 0x344a <fputc+0x4c>
    3446:	0f ef       	ldi	r16, 0xFF	; 255
    3448:	1f ef       	ldi	r17, 0xFF	; 255
    344a:	c8 01       	movw	r24, r16
    344c:	df 91       	pop	r29
    344e:	cf 91       	pop	r28
    3450:	1f 91       	pop	r17
    3452:	0f 91       	pop	r16
    3454:	08 95       	ret

00003456 <__ultoa_invert>:
    3456:	fa 01       	movw	r30, r20
    3458:	aa 27       	eor	r26, r26
    345a:	28 30       	cpi	r18, 0x08	; 8
    345c:	51 f1       	breq	.+84     	; 0x34b2 <__ultoa_invert+0x5c>
    345e:	20 31       	cpi	r18, 0x10	; 16
    3460:	81 f1       	breq	.+96     	; 0x34c2 <__ultoa_invert+0x6c>
    3462:	e8 94       	clt
    3464:	6f 93       	push	r22
    3466:	6e 7f       	andi	r22, 0xFE	; 254
    3468:	6e 5f       	subi	r22, 0xFE	; 254
    346a:	7f 4f       	sbci	r23, 0xFF	; 255
    346c:	8f 4f       	sbci	r24, 0xFF	; 255
    346e:	9f 4f       	sbci	r25, 0xFF	; 255
    3470:	af 4f       	sbci	r26, 0xFF	; 255
    3472:	b1 e0       	ldi	r27, 0x01	; 1
    3474:	3e d0       	rcall	.+124    	; 0x34f2 <__ultoa_invert+0x9c>
    3476:	b4 e0       	ldi	r27, 0x04	; 4
    3478:	3c d0       	rcall	.+120    	; 0x34f2 <__ultoa_invert+0x9c>
    347a:	67 0f       	add	r22, r23
    347c:	78 1f       	adc	r23, r24
    347e:	89 1f       	adc	r24, r25
    3480:	9a 1f       	adc	r25, r26
    3482:	a1 1d       	adc	r26, r1
    3484:	68 0f       	add	r22, r24
    3486:	79 1f       	adc	r23, r25
    3488:	8a 1f       	adc	r24, r26
    348a:	91 1d       	adc	r25, r1
    348c:	a1 1d       	adc	r26, r1
    348e:	6a 0f       	add	r22, r26
    3490:	71 1d       	adc	r23, r1
    3492:	81 1d       	adc	r24, r1
    3494:	91 1d       	adc	r25, r1
    3496:	a1 1d       	adc	r26, r1
    3498:	20 d0       	rcall	.+64     	; 0x34da <__ultoa_invert+0x84>
    349a:	09 f4       	brne	.+2      	; 0x349e <__ultoa_invert+0x48>
    349c:	68 94       	set
    349e:	3f 91       	pop	r19
    34a0:	2a e0       	ldi	r18, 0x0A	; 10
    34a2:	26 9f       	mul	r18, r22
    34a4:	11 24       	eor	r1, r1
    34a6:	30 19       	sub	r19, r0
    34a8:	30 5d       	subi	r19, 0xD0	; 208
    34aa:	31 93       	st	Z+, r19
    34ac:	de f6       	brtc	.-74     	; 0x3464 <__ultoa_invert+0xe>
    34ae:	cf 01       	movw	r24, r30
    34b0:	08 95       	ret
    34b2:	46 2f       	mov	r20, r22
    34b4:	47 70       	andi	r20, 0x07	; 7
    34b6:	40 5d       	subi	r20, 0xD0	; 208
    34b8:	41 93       	st	Z+, r20
    34ba:	b3 e0       	ldi	r27, 0x03	; 3
    34bc:	0f d0       	rcall	.+30     	; 0x34dc <__ultoa_invert+0x86>
    34be:	c9 f7       	brne	.-14     	; 0x34b2 <__ultoa_invert+0x5c>
    34c0:	f6 cf       	rjmp	.-20     	; 0x34ae <__ultoa_invert+0x58>
    34c2:	46 2f       	mov	r20, r22
    34c4:	4f 70       	andi	r20, 0x0F	; 15
    34c6:	40 5d       	subi	r20, 0xD0	; 208
    34c8:	4a 33       	cpi	r20, 0x3A	; 58
    34ca:	18 f0       	brcs	.+6      	; 0x34d2 <__ultoa_invert+0x7c>
    34cc:	49 5d       	subi	r20, 0xD9	; 217
    34ce:	31 fd       	sbrc	r19, 1
    34d0:	40 52       	subi	r20, 0x20	; 32
    34d2:	41 93       	st	Z+, r20
    34d4:	02 d0       	rcall	.+4      	; 0x34da <__ultoa_invert+0x84>
    34d6:	a9 f7       	brne	.-22     	; 0x34c2 <__ultoa_invert+0x6c>
    34d8:	ea cf       	rjmp	.-44     	; 0x34ae <__ultoa_invert+0x58>
    34da:	b4 e0       	ldi	r27, 0x04	; 4
    34dc:	a6 95       	lsr	r26
    34de:	97 95       	ror	r25
    34e0:	87 95       	ror	r24
    34e2:	77 95       	ror	r23
    34e4:	67 95       	ror	r22
    34e6:	ba 95       	dec	r27
    34e8:	c9 f7       	brne	.-14     	; 0x34dc <__ultoa_invert+0x86>
    34ea:	00 97       	sbiw	r24, 0x00	; 0
    34ec:	61 05       	cpc	r22, r1
    34ee:	71 05       	cpc	r23, r1
    34f0:	08 95       	ret
    34f2:	9b 01       	movw	r18, r22
    34f4:	ac 01       	movw	r20, r24
    34f6:	0a 2e       	mov	r0, r26
    34f8:	06 94       	lsr	r0
    34fa:	57 95       	ror	r21
    34fc:	47 95       	ror	r20
    34fe:	37 95       	ror	r19
    3500:	27 95       	ror	r18
    3502:	ba 95       	dec	r27
    3504:	c9 f7       	brne	.-14     	; 0x34f8 <__ultoa_invert+0xa2>
    3506:	62 0f       	add	r22, r18
    3508:	73 1f       	adc	r23, r19
    350a:	84 1f       	adc	r24, r20
    350c:	95 1f       	adc	r25, r21
    350e:	a0 1d       	adc	r26, r0
    3510:	08 95       	ret

00003512 <_exit>:
    3512:	f8 94       	cli

00003514 <__stop_program>:
    3514:	ff cf       	rjmp	.-2      	; 0x3514 <__stop_program>
